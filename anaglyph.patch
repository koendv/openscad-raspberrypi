commit 0add1367d9a8d2b18aa1f4aa6d66635d6a8e31f3
Author: Koen De Vleeschauwer <kdv@kdvelectronics.eu>
Date:   Fri Feb 26 11:19:42 2021 +0100

    anaglyph

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a0646c1df..692199d4b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -466,6 +466,7 @@ set(CORE_SOURCES
   src/csgnode.cc
   src/csgops.cc
   src/degree_trig.cc
+  src/dubois.cc
   src/dxfdata.cc
   src/dxfdim.cc
   src/evalcontext.cc
diff --git a/color-schemes/render/beforedawn.json b/color-schemes/render/beforedawn.json
index d4d98bba9..0f05c2f85 100644
--- a/color-schemes/render/beforedawn.json
+++ b/color-schemes/render/beforedawn.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#333333",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#c1c1c1",
         "opencsg-face-front" : "#cccccc",
         "opencsg-face-back" :  "#5563dd",
diff --git a/color-schemes/render/deepocean.json b/color-schemes/render/deepocean.json
index 9ce164fdc..f5179c583 100644
--- a/color-schemes/render/deepocean.json
+++ b/color-schemes/render/deepocean.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#333333",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#c1c1c1",
         "opencsg-face-front" : "#eeeeee",
         "opencsg-face-back" :  "#0babc8",
diff --git a/color-schemes/render/gencolorscheme.py b/color-schemes/render/gencolorscheme.py
new file mode 100755
index 000000000..b09b99001
--- /dev/null
+++ b/color-schemes/render/gencolorscheme.py
@@ -0,0 +1,58 @@
+#!/usr/bin/python3
+# print openscad color scheme
+#
+# $ ./gencolorscheme.py > redcyanglasses.json
+#
+
+import colorsys
+
+# print rgb as hex string
+# r=0..255, g=0..255, b=0.255
+def rgb(r, g, b):
+  hexval = hex(256*256*256+r*256*256+g*256+b)
+  return hexval[3:9]
+
+# print hsv as hex string
+# h=0..360, s=0..100, v=0..100
+def hsv(h, s, v):
+  color = tuple(int(round(i * 255)) for i in colorsys.hsv_to_rgb(h/360.0,s/100.0,v/100.0))
+  return rgb(color[0], color[1], color[2])
+
+# color scheme
+background =         rgb(255,255,255)
+highlight =          hsv(0,0,20)
+axes_color =         hsv(290,50,100)
+opencsg_face_front = hsv(75,50,100)
+opencsg_face_back =  hsv(285,50,100)
+cgal_face_front =    hsv(75,50,100)
+cgal_face_back =     hsv(285,50,100)
+cgal_face_2d =       hsv(90,50,100)
+cgal_edge_front =    hsv(75,50,100)
+cgal_edge_back =     hsv(290,50,100)
+cgal_edge_2d =       hsv(275,50,100)
+crosshair =          hsv(290,50,50)
+
+print (f'''{{
+    "name" : "3D Glasses",
+    "index" : 2001,
+    "show-in-gui" : true,
+    "description" : "3d anaglyph",
+    "_comment" : "created by gencolorscheme.py",
+
+    "colors" : {{
+        "background" :         "#{background}",
+        "highlight" :          "#{highlight}80",
+        "axes-color" :         "#{axes_color}",
+        "opencsg-face-front" : "#{opencsg_face_front}",
+        "opencsg-face-back" :  "#{opencsg_face_back}",
+        "cgal-face-front" :    "#{cgal_face_front}",
+        "cgal-face-back" :     "#{cgal_face_back}",
+        "cgal-face-2d" :       "#{cgal_face_2d}",
+        "cgal-edge-front" :    "#{cgal_edge_front}",
+        "cgal-edge-back" :     "#{cgal_edge_back}",
+        "cgal-edge-2d" :       "#{cgal_edge_2d}",
+        "crosshair" :          "#{crosshair}"
+    }}
+}}''')
+
+#not truncated
diff --git a/color-schemes/render/metallic.json b/color-schemes/render/metallic.json
index 838558769..08e91129e 100644
--- a/color-schemes/render/metallic.json
+++ b/color-schemes/render/metallic.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#aaaaff",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#222233",
         "opencsg-face-front" : "#ddddff",
         "opencsg-face-back" :  "#dd22dd",
diff --git a/color-schemes/render/monotone.json b/color-schemes/render/monotone.json
index df1a79aa7..06cb8f8d9 100644
--- a/color-schemes/render/monotone.json
+++ b/color-schemes/render/monotone.json
@@ -6,6 +6,7 @@
 
     "colors" : {
         "background" :         "#ffffe5",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#191916",
         "opencsg-face-front" : "#f9d72c",
         "opencsg-face-back" :  "#f9d72c",
diff --git a/color-schemes/render/nature.json b/color-schemes/render/nature.json
index 6250e7a33..b71ec0b44 100644
--- a/color-schemes/render/nature.json
+++ b/color-schemes/render/nature.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#fafafa",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#323232",
         "opencsg-face-front" : "#16a085",
         "opencsg-face-back" :  "#dbf4da",
diff --git a/color-schemes/render/redcyanglasses.json b/color-schemes/render/redcyanglasses.json
new file mode 100644
index 000000000..94a843c6f
--- /dev/null
+++ b/color-schemes/render/redcyanglasses.json
@@ -0,0 +1,22 @@
+{
+    "name" : "3D Glasses",
+    "index" : 2001,
+    "show-in-gui" : true,
+    "description" : "3d anaglyph",
+    "_comment" : "created by gencolorscheme.py",
+
+    "colors" : {
+        "background" :         "#ffffff",
+        "highlight" :          "#33333380",
+        "axes-color" :         "#ea80ff",
+        "opencsg-face-front" : "#dfff80",
+        "opencsg-face-back" :  "#df80ff",
+        "cgal-face-front" :    "#dfff80",
+        "cgal-face-back" :     "#df80ff",
+        "cgal-face-2d" :       "#bfff80",
+        "cgal-edge-front" :    "#dfff80",
+        "cgal-edge-back" :     "#ea80ff",
+        "cgal-edge-2d" :       "#ca80ff",
+        "crosshair" :          "#754080"
+    }
+}
diff --git a/color-schemes/render/solarized.json b/color-schemes/render/solarized.json
index 0fd5002b1..f7c482d4b 100644
--- a/color-schemes/render/solarized.json
+++ b/color-schemes/render/solarized.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#fdf6e3",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#191816",
         "opencsg-face-front" : "#b58800",
         "opencsg-face-back" :  "#882233",
diff --git a/color-schemes/render/starnight.json b/color-schemes/render/starnight.json
index 88a9510c3..6e076a377 100644
--- a/color-schemes/render/starnight.json
+++ b/color-schemes/render/starnight.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#000000",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#e5e5e5",
         "opencsg-face-front" : "#ffffe0",
         "opencsg-face-back" :  "#00ffff",
diff --git a/color-schemes/render/sunset.json b/color-schemes/render/sunset.json
index bd7ae26b1..c22880d37 100644
--- a/color-schemes/render/sunset.json
+++ b/color-schemes/render/sunset.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#aa4444",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#220d0d",
         "opencsg-face-front" : "#ffaaaa",
         "opencsg-face-back" :  "#882233",
diff --git a/color-schemes/render/tomorrow-night.json b/color-schemes/render/tomorrow-night.json
index 8b7966c0a..90363a2b9 100644
--- a/color-schemes/render/tomorrow-night.json
+++ b/color-schemes/render/tomorrow-night.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#1d1f21",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#e8e8e8",
         "opencsg-face-front" : "#81a2be",
         "opencsg-face-back" :  "#de935f",
diff --git a/color-schemes/render/tomorrow.json b/color-schemes/render/tomorrow.json
index 559e23fe3..1b098cbe1 100644
--- a/color-schemes/render/tomorrow.json
+++ b/color-schemes/render/tomorrow.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#f8f8f8",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#181818",
         "opencsg-face-front" : "#4271ae",
         "opencsg-face-back" :  "#f5871f",
diff --git a/images/Anaglyph-32.png b/images/Anaglyph-32.png
new file mode 100644
index 000000000..b7bc5c4a0
Binary files /dev/null and b/images/Anaglyph-32.png differ
diff --git a/openscad.pro b/openscad.pro
index 20b39b553..b837e037c 100755
--- a/openscad.pro
+++ b/openscad.pro
@@ -281,6 +281,7 @@ HEADERS += src/version_check.h \
            src/settings.h \
            src/rendersettings.h \
            src/colormap.h \
+           src/dubois.h \
            src/ThrownTogetherRenderer.h \
            src/CGAL_OGL_Polyhedron.h \
            src/QGLView.h \
@@ -520,6 +521,7 @@ SOURCES += \
            src/renderer.cc \
 	   src/VertexArray.cc \
            src/VBORenderer.cc \
+           src/dubois.cc \
            src/colormap.cc \
            src/ThrownTogetherRenderer.cc \
            src/svg.cc \
diff --git a/openscad.qrc b/openscad.qrc
index 0b143032c..247305a3b 100644
--- a/openscad.qrc
+++ b/openscad.qrc
@@ -106,6 +106,7 @@
     <file>images/SVG-white.png</file>
     <file>images/PDF.png</file>
     <file>images/PDF-white.png</file>
+    <file>images/Anaglyph-32.png</file>
     <file>sounds/complete.wav</file>
   </qresource>
 </RCC>
diff --git a/src/Camera.cc b/src/Camera.cc
index 4c13820d6..8ef77a43e 100644
--- a/src/Camera.cc
+++ b/src/Camera.cc
@@ -1,22 +1,29 @@
 #include "Camera.h"
+#include "QSettingsCached.h"
 #include "rendersettings.h"
 #include "printutils.h"
 #include "degree_trig.h"
 
 static const double DEFAULT_DISTANCE = 140.0;
 static const double DEFAULT_FOV = 22.5;
+static const float DEFAULT_EYE_SEPARATION = 35.0; // 65 mm avg. between human eyes
 
 Camera::Camera() :
 	projection(ProjectionType::PERSPECTIVE), fov(DEFAULT_FOV), viewall(false), autocenter(false)
 {
 	PRINTD("Camera()");
 
+	QSettingsCached settings;
 	// gimbal cam values
 	resetView();
 
 	pixel_width = RenderSettings::inst()->img_width;
 	pixel_height = RenderSettings::inst()->img_height;
 	locked = false;
+	anaglyph = false;
+	eyeSeparation = settings.value("3dview/eyeSeparation", DEFAULT_EYE_SEPARATION).toDouble();
+	if ((eyeSeparation <= 0.0) || (eyeSeparation > 100.0)) eyeSeparation = DEFAULT_EYE_SEPARATION;
+	std::cerr << "eye separation: " << this->eyeSeparation << std::endl;
 }
 
 void Camera::setup(std::vector<double> params)
@@ -65,6 +72,16 @@ void Camera::viewAll(const BoundingBox &bbox)
 	}
 }
 
+void Camera::zoomAnaglyph(int zoom)
+{
+	QSettingsCached settings;
+	this->eyeSeparation *= pow(0.95, -zoom / 120.0);
+	if (eyeSeparation >= 100.0) eyeSeparation = 100.0;
+	else if (eyeSeparation <= 0.0) eyeSeparation = DEFAULT_EYE_SEPARATION;
+	settings.setValue("3dview/eyeSeparation", QString::fromStdString(std::to_string(this->eyeSeparation)));
+	std::cerr << "eye separation: " << this->eyeSeparation << std::endl;
+}
+
 void Camera::zoom(int zoom, bool relative)
 {
     if (relative) {
diff --git a/src/Camera.h b/src/Camera.h
index 4cd2859c3..b770f6d24 100644
--- a/src/Camera.h
+++ b/src/Camera.h
@@ -29,6 +29,7 @@ public:
 	void setup(std::vector<double> params);
 	void gimbalDefaultTranslate();
 	void setProjection(ProjectionType type);
+	void zoomAnaglyph(int delta);
 	void zoom(int delta, bool relative);
 	double zoomValue() const;
 	double fovValue() const;
@@ -67,6 +68,10 @@ public:
 	// (--camera option in commandline mode)
 	bool locked;
 
+	// true if in anaglyph 3D stereo view
+	bool anaglyph;
+	double eyeSeparation;
+
 protected:
 	// Perspective settings
 	double viewer_distance;
diff --git a/src/GLView.cc b/src/GLView.cc
index 766387736..43631fffb 100644
--- a/src/GLView.cc
+++ b/src/GLView.cc
@@ -115,8 +115,104 @@ void GLView::setupCamera() const
   glRotated(cam.object_rot.z(), 0.0, 0.0, 1.0);
 }
 
+/* set up camera for left or right eye */
+/* after https://quiescentspark.blogspot.com/2011/05/rendering-3d-anaglyph-in-opengl.html */
+void GLView::setup3dCamera(bool leftCamera) {
+  float left, right, bottom, top;
+  float convergence = (float)cam.zoomValue();
+  float aspectRatio = aspectratio;
+  float fov = cam.fov;
+  float nearClippingDistance = 0.1 * cam.zoomValue();
+  float farClippingDistance = 100.0 * cam.zoomValue();
+
+  // calculate frustum
+  top = nearClippingDistance * tan_degrees(fov / 2.0);
+  bottom = -top;
+  float a = aspectRatio * tan_degrees(fov / 2.0) * convergence;
+  float b = a - cam.eyeSeparation / 2;
+  float c = a + cam.eyeSeparation / 2;
+  if (leftCamera) { // left camera
+    left = -b * nearClippingDistance / convergence;
+    right = c * nearClippingDistance / convergence;
+  }
+  else { // right camera
+    left = -c * nearClippingDistance / convergence;
+    right = b * nearClippingDistance / convergence;
+  }
+
+  glMatrixMode(GL_PROJECTION);
+  glLoadIdentity();
+  glFrustum(left, right, bottom, top, nearClippingDistance, farClippingDistance);
+  glMatrixMode(GL_MODELVIEW);
+  glLoadIdentity();
+  if (leftCamera) { // left camera
+    glTranslatef(cam.eyeSeparation / 2, 0.0, 0.0);
+  }
+  else { // right camera
+    glTranslatef(-cam.eyeSeparation / 2, 0.0, 0.0);
+  }
+  gluLookAt(0.0, -cam.zoomValue(), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
+  glRotated(cam.object_rot.x(), 1.0, 0.0, 0.0);
+  glRotated(cam.object_rot.y(), 0.0, 1.0, 0.0);
+  glRotated(cam.object_rot.z(), 0.0, 0.0, 1.0);
+}
+
+void GLView::paintOnce()
+{
+  auto crosshaircol = ColorMap::getColor(*this->colorscheme, RenderColor::CROSSHAIR_COLOR);
+  // The crosshair should be fixed at the center of the viewport...
+  if (showcrosshairs) GLView::showCrosshairs(crosshaircol);
+  glTranslated(cam.object_trans.x(), cam.object_trans.y(), cam.object_trans.z());
+  // ...the axis lines need to follow the object translation.
+  auto axescolor = ColorMap::getColor(*this->colorscheme, RenderColor::AXES_COLOR);
+  if (showaxes) GLView::showAxes(axescolor);
+  // mark the scale along the axis lines
+  if (showaxes && showscale) GLView::showScalemarkers(axescolor);
+
+  glEnable(GL_LIGHTING);
+  glDepthFunc(GL_LESS);
+  glCullFace(GL_BACK);
+  glDisable(GL_CULL_FACE);
+  glLineWidth(2);
+  glColor3d(1.0, 0.0, 0.0);
+
+  if (this->renderer) {
+#if defined(ENABLE_OPENCSG)
+    // FIXME: This belongs in the OpenCSG renderer, but it doesn't know about this ID yet
+    OpenCSG::setContext(this->opencsg_id);
+#endif
+    this->renderer->prepare(showfaces, showedges);
+    this->renderer->draw(showfaces, showedges);
+  }
+
+  glDisable(GL_LIGHTING);
+}
+
+void GLView::anaglyphHalfColor() {
+  glDisable(GL_LIGHTING);
+  auto bgcol = ColorMap::getColor(*this->colorscheme, RenderColor::BACKGROUND_COLOR);
+  glClearColor(bgcol[0], bgcol[1], bgcol[2], 1.0);
+
+  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
+  setup3dCamera(true);
+  glColorMask(true, false, false, false); // red
+  paintOnce();
+
+  glClear(GL_DEPTH_BUFFER_BIT);
+  setup3dCamera(false);
+  glColorMask(false, true, true, false); // cyan
+  paintOnce();
+
+  glColorMask(true, true, true, true);
+}
+
 void GLView::paintGL()
 {
+  if (cam.anaglyph) {
+    anaglyphHalfColor();
+    return;
+  }
+
   glDisable(GL_LIGHTING);
   auto bgcol = ColorMap::getColor(*this->colorscheme, RenderColor::BACKGROUND_COLOR);
   auto axescolor = ColorMap::getColor(*this->colorscheme, RenderColor::AXES_COLOR);
diff --git a/src/GLView.h b/src/GLView.h
index 1fcd31bc8..d43a7843b 100644
--- a/src/GLView.h
+++ b/src/GLView.h
@@ -2,20 +2,20 @@
 
 /* GLView: A basic OpenGL rectangle for rendering images.
 
-This class is inherited by:
+	 This class is inherited by:
 
-*QGLview - for Qt GUI
-*OffscreenView - for offscreen rendering, in tests and from command-line
-(This class is also overridden by NULLGL.cc for special experiments)
+ * QGLview - for Qt GUI
+ * OffscreenView - for offscreen rendering, in tests and from command-line
+	 (This class is also overridden by NULLGL.cc for special experiments)
 
-The view assumes either a Gimbal Camera (rotation,translation,distance)
-or Vector Camera (eye,center/target) is being used. See Camera.h. The
-cameras are not kept in sync.
+	 The view assumes either a Gimbal Camera (rotation,translation,distance)
+	 or Vector Camera (eye,center/target) is being used. See Camera.h. The
+	 cameras are not kept in sync.
 
-QGLView only uses GimbalCamera while OffscreenView can use either one.
-Some actions (showCrossHairs) only work properly on Gimbal Camera.
+	 QGLView only uses GimbalCamera while OffscreenView can use either one.
+	 Some actions (showCrossHairs) only work properly on Gimbal Camera.
 
-*/
+ */
 
 #include <Eigen/Core>
 #include <Eigen/Geometry>
@@ -39,6 +39,10 @@ public:
 	void setCamera(const Camera &cam);
 	void setupCamera() const;
 
+	void setup3dCamera(bool leftCamera);
+	void paintOnce();
+	void anaglyphHalfColor();
+
 	void setColorScheme(const ColorScheme &cs);
 	void setColorScheme(const std::string &cs);
 	void updateColorScheme();
diff --git a/src/MainWindow.h b/src/MainWindow.h
index aaed0e139..25f08b381 100644
--- a/src/MainWindow.h
+++ b/src/MainWindow.h
@@ -299,6 +299,7 @@ public slots:
 	void viewCenter();
 	void viewPerspective();
 	void viewOrthogonal();
+	void viewAnaglyph();
 	void viewTogglePerspective();
 	void viewResetView();
 	void viewAll();
diff --git a/src/MainWindow.ui b/src/MainWindow.ui
index c3ea8e0e9..93eede35f 100644
--- a/src/MainWindow.ui
+++ b/src/MainWindow.ui
@@ -251,6 +251,7 @@
          <addaction name="separator"/>
          <addaction name="viewActionPerspective"/>
          <addaction name="viewActionOrthogonal"/>
+         <addaction name="viewActionAnaglyph"/>
          <addaction name="separator"/>
          <addaction name="viewActionShowAxes"/>
          <addaction name="viewActionShowScaleProportional"/>
@@ -413,6 +414,7 @@
     <addaction name="separator"/>
     <addaction name="viewActionPerspective"/>
     <addaction name="viewActionOrthogonal"/>
+    <addaction name="viewActionAnaglyph"/>
     <addaction name="separator"/>
     <addaction name="viewActionHideEditorToolBar"/>
     <addaction name="viewActionHide3DViewToolBar"/>
@@ -1302,6 +1304,24 @@
     <string>&amp;Orthogonal</string>
    </property>
   </action>
+  <action name="viewActionAnaglyph">
+   <property name="checkable">
+    <bool>true</bool>
+   </property>
+   <property name="icon">
+    <iconset resource="../openscad.qrc">
+     <normaloff>:/images/Anaglyph-32.png</normaloff>:/images/Anaglyph-32.png</iconset>
+   </property>
+   <property name="text">
+    <string>&amp;Stereo Vision (Anaglyph)</string>
+   </property>
+   <property name="toolTip">
+    <string>Stereo Vision (Anaglyph) - requires special red-cyan glasses</string>
+   </property>
+   <property name="shortcut">
+    <string>Alt+S</string>
+   </property>
+  </action>
   <action name="windowActionHideConsole">
    <property name="checkable">
     <bool>true</bool>
diff --git a/src/QGLView.cc b/src/QGLView.cc
index 0234ea662..cab4598fb 100644
--- a/src/QGLView.cc
+++ b/src/QGLView.cc
@@ -329,7 +329,10 @@ void QGLView::wheelEvent(QWheelEvent *event)
 {
 	const auto pos = event->pos();
 	const int v = event->angleDelta().y();
-	if (this->mouseCentricZoom) {
+	if (QGuiApplication::keyboardModifiers().testFlag(Qt::ControlModifier)) {
+		cam.zoomAnaglyph(v);
+		updateGL();
+	} else if (this->mouseCentricZoom) {
 		zoomCursor(pos.x(), pos.y(), v);
 	} else {
 		zoom(v, true);
diff --git a/src/QGLView.h b/src/QGLView.h
index 195852972..33325b762 100644
--- a/src/QGLView.h
+++ b/src/QGLView.h
@@ -41,6 +41,7 @@ public:
 	void setOrthoMode(bool enabled);
 	bool showScaleProportional() const { return this->showscale; }
 	void setShowScaleProportional(bool enabled) { this->showscale = enabled; }
+	void setAnaglyphMode(bool enabled) { this->cam.anaglyph = enabled; }
 	std::string getRendererInfo() const override;
 	float getDPI() override { return this->devicePixelRatio(); }
 
diff --git a/src/builtin.cc b/src/builtin.cc
index aa857908a..6f20d6b54 100644
--- a/src/builtin.cc
+++ b/src/builtin.cc
@@ -113,6 +113,7 @@ Builtins::Builtins()
 	this->assignments.emplace_back(new Assignment("$vpr", make_shared<Literal>(VectorType(0.0, 0.0, 0.0))) );
 	this->assignments.emplace_back(new Assignment("$vpd", make_shared<Literal>(500)) );
 	this->assignments.emplace_back(new Assignment("$vpf", make_shared<Literal>(22.5)) );
+	this->assignments.emplace_back(new Assignment("$anaglyph", make_shared<Literal>(Value::undefined.clone())) ); // true if rendering anaglyph 3d
 }
 
 void Builtins::initKeywordList()
diff --git a/src/colormap.cc b/src/colormap.cc
index 6b794be17..71b035635 100644
--- a/src/colormap.cc
+++ b/src/colormap.cc
@@ -37,6 +37,7 @@ RenderColorScheme::RenderColorScheme() : _path("")
   _show_in_gui = true;
 
   _color_scheme.insert(ColorScheme::value_type(RenderColor::BACKGROUND_COLOR, Color4f(0xff, 0xff, 0xe5)));
+  _color_scheme.insert(ColorScheme::value_type(RenderColor::HIGHLIGHT_COLOR, Color4f(0xff, 0x51, 0x51, 0x80))); // 50% transparencency
   _color_scheme.insert(ColorScheme::value_type(RenderColor::AXES_COLOR, Color4f(0x00, 0x00, 0x00)));
   _color_scheme.insert(ColorScheme::value_type(RenderColor::OPENCSG_FACE_FRONT_COLOR, Color4f(0xf9, 0xd7, 0x2c)));
   _color_scheme.insert(ColorScheme::value_type(RenderColor::OPENCSG_FACE_BACK_COLOR, Color4f(0x9d, 0xcb, 0x51)));
@@ -58,6 +59,7 @@ RenderColorScheme::RenderColorScheme(fs::path path) : _path(path)
 	_show_in_gui = pt.get<bool>("show-in-gui");
 	
 	addColor(RenderColor::BACKGROUND_COLOR, "background");
+	addColor(RenderColor::HIGHLIGHT_COLOR, "highlight");
 	addColor(RenderColor::AXES_COLOR, "axes-color");
 	addColor(RenderColor::OPENCSG_FACE_FRONT_COLOR, "opencsg-face-front");
 	addColor(RenderColor::OPENCSG_FACE_BACK_COLOR, "opencsg-face-back");
@@ -132,6 +134,14 @@ void RenderColorScheme::addColor(RenderColor colorKey, std::string key)
     int g = (val >> 8) & 0xff;
     int b = val & 0xff;
     _color_scheme.insert(ColorScheme::value_type(colorKey, Color4f(r, g, b)));
+  } else if ((color.length() == 9) && (color.at(0) == '#')) {
+    char *endptr;
+    unsigned long int val = strtoul(color.substr(1).c_str(), &endptr, 16);
+    int r = (val >> 24) & 0xff;
+    int g = (val >> 16) & 0xff;
+    int b = (val >> 8) & 0xff;
+    int a = val & 0xff;
+    _color_scheme.insert(ColorScheme::value_type(colorKey, Color4f(r, g, b, a)));
   }
   else {
     throw std::invalid_argument(std::string("invalid color value for key '") + key + "': '" + color + "'");
diff --git a/src/colormap.h b/src/colormap.h
index a0dd9c350..2567f23d6 100644
--- a/src/colormap.h
+++ b/src/colormap.h
@@ -13,6 +13,7 @@ namespace fs = boost::filesystem;
 
 enum class RenderColor {
 	BACKGROUND_COLOR,
+	HIGHLIGHT_COLOR,
 	AXES_COLOR,
 	OPENCSG_FACE_FRONT_COLOR,
 	OPENCSG_FACE_BACK_COLOR,
diff --git a/src/dubois.cc b/src/dubois.cc
new file mode 100644
index 000000000..e1ab8c702
--- /dev/null
+++ b/src/dubois.cc
@@ -0,0 +1,37 @@
+#include "dubois.h"
+
+bool change_color = false;
+
+void duboisOn() {
+  change_color = true;
+}
+
+void duboisOff() {
+  change_color = false;
+}
+
+/* Calculate Dubois color. Assume left and right image are the same. */
+
+Color4f duboisColor(Color4f c_in) {
+  Color4f c_out;
+  if (change_color) {
+
+    // values for lcd
+    // from "Producing Anaglyphs from Synthetic Images",
+    // https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.6968&rep=rep1&type=pdf#page=4
+
+    c_out[0] = (0.4561   -.0434706)*c_in[0]+ ( .500484 -.0879388)*c_in[1]+( .176381 -0.00155529)*c_in[2];
+    c_out[1] = (-.0400822+.378476) *c_in[0]+ (-.0378246+.73364)  *c_in[1]+(-.0157589 -.0184503) *c_in[2];
+    c_out[2] = (-.0152161-.0721527)*c_in[0]+ (-.0205971-.112961) *c_in[1]+(-.00546856+1.2264)   *c_in[2];
+    c_out[3] = c_in[3];
+
+    for (int i = 0; i < 3; i++) {
+      if (c_out[i] < 0.0) c_out[i] = 0.0;
+      else if (c_out[i] > 1.0) c_out[i] = 1.0;
+    }
+  } else {
+    c_out = c_in;
+  }
+  return c_out;
+}
+// not truncated
diff --git a/src/dubois.h b/src/dubois.h
new file mode 100644
index 000000000..21ce503cc
--- /dev/null
+++ b/src/dubois.h
@@ -0,0 +1,11 @@
+#ifndef DUBOIS_H
+#define DUBOIS_H
+
+#include <linalg.h>
+
+static bool use_dubois;
+void duboisOn();
+void duboisOff();
+Color4f duboisColor(Color4f c_in);
+
+#endif
diff --git a/src/mainwin.cc b/src/mainwin.cc
index 39bb52597..6ad38ce93 100755
--- a/src/mainwin.cc
+++ b/src/mainwin.cc
@@ -43,6 +43,7 @@
 #include "modcontext.h"
 #include "progress.h"
 #include "dxfdim.h"
+#include "dubois.h"
 #include "settings.h"
 #include "AboutDialog.h"
 #include "FontListDialog.h"
@@ -445,6 +446,7 @@ MainWindow::MainWindow(const QStringList &filenames)
 	connect(this->viewActionViewAll, SIGNAL(triggered()), this, SLOT(viewAll()));
 	connect(this->viewActionPerspective, SIGNAL(triggered()), this, SLOT(viewPerspective()));
 	connect(this->viewActionOrthogonal, SIGNAL(triggered()), this, SLOT(viewOrthogonal()));
+	connect(this->viewActionAnaglyph, SIGNAL(triggered()), this, SLOT(viewAnaglyph()));
 	connect(this->viewActionZoomIn, SIGNAL(triggered()), qglview, SLOT(ZoomIn()));
 	connect(this->viewActionZoomOut, SIGNAL(triggered()), qglview, SLOT(ZoomOut()));
 	connect(this->viewActionHideEditorToolBar, SIGNAL(triggered()), this, SLOT(hideEditorToolbar()));
@@ -752,10 +754,12 @@ void MainWindow::loadViewSettings(){
 		viewModeShowCrosshairs();
 	}
 	if (settings.value("view/showScaleProportional", true).toBool()) {
-        viewActionShowScaleProportional->setChecked(true);
-        viewModeShowScaleProportional();
-    }
-	if (settings.value("view/orthogonalProjection").toBool()) {
+		viewActionShowScaleProportional->setChecked(true);
+		viewModeShowScaleProportional();
+	}
+	if (settings.value("view/anaglyphProjection").toBool()) {
+		viewAnaglyph();
+	} else if (settings.value("view/orthogonalProjection").toBool()) {
 		viewOrthogonal();
 	} else {
 		viewPerspective();
@@ -2773,9 +2777,14 @@ void MainWindow::viewPerspective()
 {
 	QSettingsCached settings;
 	settings.setValue("view/orthogonalProjection",false);
+	settings.setValue("view/anaglyphProjection",false);
 	viewActionPerspective->setChecked(true);
 	viewActionOrthogonal->setChecked(false);
+	viewActionAnaglyph->setChecked(false);
+	duboisOff();
+	this->top_ctx->set_variable("$anaglyph", Value(false));
 	this->qglview->setOrthoMode(false);
+	this->qglview->setAnaglyphMode(false);
 	this->qglview->updateGL();
 }
 
@@ -2783,9 +2792,30 @@ void MainWindow::viewOrthogonal()
 {
 	QSettingsCached settings;
 	settings.setValue("view/orthogonalProjection",true);
+	settings.setValue("view/anaglyphProjection",false);
+	viewActionPerspective->setChecked(true);
 	viewActionPerspective->setChecked(false);
 	viewActionOrthogonal->setChecked(true);
+	viewActionAnaglyph->setChecked(false);
+	duboisOff();
+	this->top_ctx->set_variable("$anaglyph", Value(false));
 	this->qglview->setOrthoMode(true);
+	this->qglview->setAnaglyphMode(false);
+	this->qglview->updateGL();
+}
+
+void MainWindow::viewAnaglyph()
+{
+	QSettingsCached settings;
+	settings.setValue("view/orthogonalProjection",false);
+	settings.setValue("view/anaglyphProjection",true);
+	viewActionPerspective->setChecked(false);
+	viewActionOrthogonal->setChecked(false);
+	viewActionAnaglyph->setChecked(true);
+	duboisOn();
+	this->top_ctx->set_variable("$anaglyph", Value(true));
+	this->qglview->setOrthoMode(false);
+	this->qglview->setAnaglyphMode(true);
 	this->qglview->updateGL();
 }
 
diff --git a/src/renderer.cc b/src/renderer.cc
index 7964e1961..6afd150cd 100644
--- a/src/renderer.cc
+++ b/src/renderer.cc
@@ -9,6 +9,7 @@
 
 #include "polyset-utils.h"
 #include "grid.h"
+#include "dubois.h"
 #include <Eigen/LU>
 
 Renderer::Renderer() : colorscheme(nullptr)
@@ -236,11 +237,12 @@ represented in the colorscheme (yet). Also edgecolors are currently the
 same for CGAL & OpenCSG */
 void Renderer::setColorScheme(const ColorScheme &cs) {
 	PRINTD("setColorScheme");
-	colormap[ColorMode::MATERIAL] = ColorMap::getColor(cs, RenderColor::OPENCSG_FACE_FRONT_COLOR);
-	colormap[ColorMode::CUTOUT] = ColorMap::getColor(cs, RenderColor::OPENCSG_FACE_BACK_COLOR);
-	colormap[ColorMode::MATERIAL_EDGES] = ColorMap::getColor(cs, RenderColor::CGAL_EDGE_FRONT_COLOR);
-	colormap[ColorMode::CUTOUT_EDGES] = ColorMap::getColor(cs, RenderColor::CGAL_EDGE_BACK_COLOR);
-	colormap[ColorMode::EMPTY_SPACE] = ColorMap::getColor(cs, RenderColor::BACKGROUND_COLOR);
+	colormap[ColorMode::MATERIAL] = duboisColor(ColorMap::getColor(cs, RenderColor::OPENCSG_FACE_FRONT_COLOR));
+	colormap[ColorMode::CUTOUT] = duboisColor(ColorMap::getColor(cs, RenderColor::OPENCSG_FACE_BACK_COLOR));
+	colormap[ColorMode::MATERIAL_EDGES] = duboisColor(ColorMap::getColor(cs, RenderColor::CGAL_EDGE_FRONT_COLOR));
+	colormap[ColorMode::CUTOUT_EDGES] = duboisColor(ColorMap::getColor(cs, RenderColor::CGAL_EDGE_BACK_COLOR));
+	colormap[ColorMode::EMPTY_SPACE] = duboisColor(ColorMap::getColor(cs, RenderColor::BACKGROUND_COLOR));
+	colormap[ColorMode::HIGHLIGHT] = duboisColor(ColorMap::getColor(cs, RenderColor::HIGHLIGHT_COLOR));
 	this->colorscheme = &cs;
 }
 
diff --git a/src/state.h b/src/state.h
index ca07f3a6f..1e60671c7 100644
--- a/src/state.h
+++ b/src/state.h
@@ -2,6 +2,7 @@
 
 #include <cstring>
 #include "linalg.h"
+#include "dubois.h"
 
 #define FLAG(var, flag, on) on ? (var |= flag) : (var &= ~flag)
 
@@ -14,7 +15,7 @@ public:
 		this->color_.fill(-1.0f);
 	}
   virtual ~State() {}
-  
+
   void setPrefix(bool on) { FLAG(this->flags, PREFIX, on); }
   void setPostfix(bool on) { FLAG(this->flags, POSTFIX, on); }
   void setHighlight(bool on) { FLAG(this->flags, HIGHLIGHT, on); }
@@ -22,7 +23,7 @@ public:
   void setNumChildren(unsigned int numc) { this->numchildren = numc; }
   void setParent(const AbstractNode *parent) { this->parentnode = parent; }
 	void setMatrix(const Transform3d &m) { this->matrix_ = m; }
-	void setColor(const Color4f &c) { this->color_ = c; }
+	void setColor(const Color4f &c) { this->color_ = duboisColor(c); }
 	void setPreferNef(bool on) { FLAG(this->flags, PREFERNEF, on); }
 	bool preferNef() const { return this->flags & PREFERNEF; }
 

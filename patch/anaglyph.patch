diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1cf0fb6f1..85d5a1271 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -111,7 +111,7 @@ if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
   endif()
 endif()
 
-set(BOOST_DIRECTLY_REQUIRED_LIBRARIES filesystem system regex program_options)
+set(BOOST_DIRECTLY_REQUIRED_LIBRARIES filesystem thread system regex program_options)
 
 find_package(PkgConfig)
 
diff --git a/color-schemes/render/beforedawn.json b/color-schemes/render/beforedawn.json
index d4d98bba9..0f05c2f85 100644
--- a/color-schemes/render/beforedawn.json
+++ b/color-schemes/render/beforedawn.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#333333",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#c1c1c1",
         "opencsg-face-front" : "#cccccc",
         "opencsg-face-back" :  "#5563dd",
diff --git a/color-schemes/render/deepocean.json b/color-schemes/render/deepocean.json
index 9ce164fdc..f5179c583 100644
--- a/color-schemes/render/deepocean.json
+++ b/color-schemes/render/deepocean.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#333333",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#c1c1c1",
         "opencsg-face-front" : "#eeeeee",
         "opencsg-face-back" :  "#0babc8",
diff --git a/color-schemes/render/metallic.json b/color-schemes/render/metallic.json
index 838558769..08e91129e 100644
--- a/color-schemes/render/metallic.json
+++ b/color-schemes/render/metallic.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#aaaaff",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#222233",
         "opencsg-face-front" : "#ddddff",
         "opencsg-face-back" :  "#dd22dd",
diff --git a/color-schemes/render/monotone.json b/color-schemes/render/monotone.json
index df1a79aa7..06cb8f8d9 100644
--- a/color-schemes/render/monotone.json
+++ b/color-schemes/render/monotone.json
@@ -6,6 +6,7 @@
 
     "colors" : {
         "background" :         "#ffffe5",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#191916",
         "opencsg-face-front" : "#f9d72c",
         "opencsg-face-back" :  "#f9d72c",
diff --git a/color-schemes/render/nature.json b/color-schemes/render/nature.json
index 6250e7a33..b71ec0b44 100644
--- a/color-schemes/render/nature.json
+++ b/color-schemes/render/nature.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#fafafa",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#323232",
         "opencsg-face-front" : "#16a085",
         "opencsg-face-back" :  "#dbf4da",
diff --git a/color-schemes/render/solarized.json b/color-schemes/render/solarized.json
index 0fd5002b1..f7c482d4b 100644
--- a/color-schemes/render/solarized.json
+++ b/color-schemes/render/solarized.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#fdf6e3",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#191816",
         "opencsg-face-front" : "#b58800",
         "opencsg-face-back" :  "#882233",
diff --git a/color-schemes/render/starnight.json b/color-schemes/render/starnight.json
index 88a9510c3..6e076a377 100644
--- a/color-schemes/render/starnight.json
+++ b/color-schemes/render/starnight.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#000000",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#e5e5e5",
         "opencsg-face-front" : "#ffffe0",
         "opencsg-face-back" :  "#00ffff",
diff --git a/color-schemes/render/sunset.json b/color-schemes/render/sunset.json
index bd7ae26b1..c22880d37 100644
--- a/color-schemes/render/sunset.json
+++ b/color-schemes/render/sunset.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#aa4444",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#220d0d",
         "opencsg-face-front" : "#ffaaaa",
         "opencsg-face-back" :  "#882233",
diff --git a/color-schemes/render/tomorrow-night.json b/color-schemes/render/tomorrow-night.json
index 8b7966c0a..90363a2b9 100644
--- a/color-schemes/render/tomorrow-night.json
+++ b/color-schemes/render/tomorrow-night.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#1d1f21",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#e8e8e8",
         "opencsg-face-front" : "#81a2be",
         "opencsg-face-back" :  "#de935f",
diff --git a/color-schemes/render/tomorrow.json b/color-schemes/render/tomorrow.json
index 559e23fe3..1b098cbe1 100644
--- a/color-schemes/render/tomorrow.json
+++ b/color-schemes/render/tomorrow.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#f8f8f8",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#181818",
         "opencsg-face-front" : "#4271ae",
         "opencsg-face-back" :  "#f5871f",
diff --git a/openscad.qrc b/openscad.qrc
index 36d420d75..5147743b2 100644
--- a/openscad.qrc
+++ b/openscad.qrc
@@ -94,6 +94,8 @@
     <file>resources/icons/svg-default/perspective-white.svg</file>
     <file>resources/icons/svg-default/orthogonal.svg</file>
     <file>resources/icons/svg-default/orthogonal-white.svg</file>
+    <file>resources/icons/svg-default/anaglyph.svg</file>
+    <file>resources/icons/svg-default/anaglyph-white.svg</file>
     <file>resources/icons/svg-default/axes.svg</file>
     <file>resources/icons/svg-default/axes-white.svg</file>
     <file>resources/icons/svg-default/scalemarkers.svg</file>
diff --git a/src/Camera.h b/src/Camera.h
index 5ea150efb..346916fbf 100644
--- a/src/Camera.h
+++ b/src/Camera.h
@@ -24,7 +24,7 @@ projection, Perspective and Orthogonal.
 class Camera
 {
 public:
-	enum class ProjectionType { ORTHOGONAL, PERSPECTIVE } projection;
+	enum class ProjectionType { ORTHOGONAL, PERSPECTIVE, ANAGLYPH } projection;
 	Camera();
 	void setup(std::vector<double> params);
 	void gimbalDefaultTranslate();
diff --git a/src/GLView.cc b/src/GLView.cc
index 20aced7fe..49ce99028 100644
--- a/src/GLView.cc
+++ b/src/GLView.cc
@@ -30,6 +30,9 @@ GLView::GLView()
   colorscheme = &ColorMap::inst()->defaultColorScheme();
   cam = Camera();
   far_far_away = RenderSettings::inst()->far_gl_clip_limit;
+  eyeSeparation = 100.0;
+  outOfScreen = 18.0;
+  nearClippingPlane = 1.0;
 #ifdef ENABLE_OPENCSG
   is_opencsg_capable = false;
   has_shaders = false;
@@ -80,6 +83,110 @@ void GLView::resizeGL(int w, int h)
 	if (this->renderer) { this->renderer->resize(cam.pixel_width,cam.pixel_height); }
 }
 
+/* 3d anaglyph - set up camera for left or right eye */
+/* after https://quiescentspark.blogspot.com/2011/05/rendering-3d-anaglyph-in-opengl.html */
+void GLView::setup3dCamera(bool leftCamera) {
+  float left, right, bottom, top;
+  float convergence = (float)cam.zoomValue();
+  float aspectRatio = aspectratio;
+  float fov = cam.fov;
+
+  /* outOfScreen is the distance the world is translated to the back of the screen.
+     Better would be that outOfScreen is the percentage of the world that should stick out from the screen,
+     and have OpenSCAD calculate the translation.  */
+
+  double offset = - cam.zoomValue() * outOfScreen * 0.01; // distance the world is translated to the back of the screen
+  float nearClippingDistance = 0.01 * cam.zoomValue() * nearClippingPlane;
+  float farClippingDistance = 1000.0 * cam.zoomValue() * nearClippingPlane; // ratio of 100000 between near and far - ought to be no problem for floats
+  float eyeSeparationDistance = eyeSeparation / 100.0 * cam.zoomValue() / 30.0;
+
+  // calculate frustum
+  top = nearClippingDistance * tan_degrees(fov / 2.0);
+  bottom = -top;
+  float a = aspectRatio * tan_degrees(fov / 2.0) * convergence;
+  float b = a - eyeSeparationDistance / 2;
+  float c = a + eyeSeparationDistance / 2;
+  if (leftCamera) { // left camera
+    left = -b * nearClippingDistance / convergence;
+    right = c * nearClippingDistance / convergence;
+  }
+  else { // right camera
+    left = -c * nearClippingDistance / convergence;
+    right = b * nearClippingDistance / convergence;
+  }
+
+  glMatrixMode(GL_PROJECTION);
+  glLoadIdentity();
+  glFrustum(left, right, bottom, top, nearClippingDistance, farClippingDistance);
+  glMatrixMode(GL_MODELVIEW);
+  glLoadIdentity();
+  if (leftCamera) { // left camera
+    glTranslatef(eyeSeparationDistance / 2, 0.0, 0.0);
+  }
+  else { // right camera
+    glTranslatef(-eyeSeparationDistance / 2, 0.0, 0.0);
+  }
+  glTranslatef(0.0, 0.0, offset);
+  gluLookAt(0.0, -cam.zoomValue(), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
+  glRotated(cam.object_rot.x(), 1.0, 0.0, 0.0);
+  glRotated(cam.object_rot.y(), 0.0, 1.0, 0.0);
+  glRotated(cam.object_rot.z(), 0.0, 0.0, 1.0);
+}
+
+/* 3d anaglyph - paint one eye */
+
+void GLView::paintOnce()
+{
+  auto crosshaircol = ColorMap::getColor(*this->colorscheme, RenderColor::CROSSHAIR_COLOR);
+  // The crosshair should be fixed at the center of the viewport...
+  if (showcrosshairs) GLView::showCrosshairs(crosshaircol);
+  glTranslated(cam.object_trans.x(), cam.object_trans.y(), cam.object_trans.z());
+  // ...the axis lines need to follow the object translation.
+  auto axescolor = ColorMap::getColor(*this->colorscheme, RenderColor::AXES_COLOR);
+  if (showaxes) GLView::showAxes(axescolor);
+  // mark the scale along the axis lines
+  if (showaxes && showscale) GLView::showScalemarkers(axescolor);
+
+  glEnable(GL_LIGHTING);
+  glDepthFunc(GL_LESS);
+  glCullFace(GL_BACK);
+  glDisable(GL_CULL_FACE);
+  glLineWidth(2);
+  glColor3d(1.0, 0.0, 0.0);
+
+  if (this->renderer) {
+#if defined(ENABLE_OPENCSG)
+    OpenCSG::setContext(this->opencsg_id);
+#endif
+    this->renderer->prepare(showfaces, showedges);
+    this->renderer->draw(showfaces, showedges);
+  }
+
+  glDisable(GL_LIGHTING);
+}
+
+/* 3d anaglyph - paint both eyes */
+
+void GLView::paint3dAnaglyph() {
+  glDisable(GL_LIGHTING);
+  auto bgcol = ColorMap::getColor(*this->colorscheme, RenderColor::BACKGROUND_COLOR);
+  glClearColor(bgcol[0], bgcol[1], bgcol[2], 1.0);
+
+  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
+  setup3dCamera(true); // left eye
+  glColorMask(true, false, false, false); // red
+  paintOnce();
+
+  glClear(GL_DEPTH_BUFFER_BIT);
+  setup3dCamera(false); // right eye
+  glColorMask(false, true, true, false); // cyan
+  paintOnce();
+
+  glColorMask(true, true, true, true);
+}
+
+/* 2D */
+
 void GLView::setCamera(const Camera &cam)
 {
   this->cam = cam;
@@ -117,6 +224,11 @@ void GLView::setupCamera() const
 
 void GLView::paintGL()
 {
+  if (this->cam.projection == Camera::ProjectionType::ANAGLYPH) {
+    paint3dAnaglyph();
+    return;
+  }
+
   glDisable(GL_LIGHTING);
   auto bgcol = ColorMap::getColor(*this->colorscheme, RenderColor::BACKGROUND_COLOR);
   auto axescolor = ColorMap::getColor(*this->colorscheme, RenderColor::AXES_COLOR);
diff --git a/src/GLView.h b/src/GLView.h
index 1fcd31bc8..bb63cef41 100644
--- a/src/GLView.h
+++ b/src/GLView.h
@@ -39,6 +39,10 @@ public:
 	void setCamera(const Camera &cam);
 	void setupCamera() const;
 
+	void setup3dCamera(bool leftCamera);
+	void paintOnce();
+	void paint3dAnaglyph();
+
 	void setColorScheme(const ColorScheme &cs);
 	void setColorScheme(const std::string &cs);
 	void updateColorScheme();
@@ -53,6 +57,9 @@ public:
 	void setShowFaces(bool enabled) { this->showfaces = enabled; }
 	bool showCrosshairs() const { return this->showcrosshairs; }
 	void setShowCrosshairs(bool enabled) { this->showcrosshairs = enabled; }
+	void setEyeSeparation(double val) { this->eyeSeparation = val; }
+	void setOutOfScreen(double val) { this->outOfScreen = val; }
+	void setNearClippingPlane(double val) { this->nearClippingPlane = val; }
 
 	virtual bool save(const char *filename) const = 0;
 	virtual std::string getRendererInfo() const = 0;
@@ -70,6 +77,9 @@ public:
 	bool showedges;
 	bool showcrosshairs;
 	bool showscale;
+	double eyeSeparation; // in % of convergence distance / 30.0. Rule of thumb: convergence distance / 30.0
+	double outOfScreen;   // in % of screen width. Ought to be: in % of body depth. Rule of thumb: 18%
+	double nearClippingPlane; // in % of convergence distance. Rule of thumb: begin with 20-30%
 
 #ifdef ENABLE_OPENCSG
 	bool is_opencsg_capable;
diff --git a/src/InitConfigurator.cc b/src/InitConfigurator.cc
index 9fd7c25c8..64c66f771 100644
--- a/src/InitConfigurator.cc
+++ b/src/InitConfigurator.cc
@@ -51,3 +51,18 @@ void InitConfigurator::updateComboBox(const BlockSignals<QComboBox *> &comboBox,
 		comboBox->setCurrentIndex(0);
 	}
 }
+ 
+void InitConfigurator::initSliderRange(const BlockSignals<QSlider *> &spinBox,const Settings::SettingsEntryInt &entry)
+{
+	spinBox->blockSignals(true);
+	spinBox->setMinimum(entry.minimum());
+	spinBox->setMaximum(entry.maximum());
+	spinBox->setValue(entry.value());
+	spinBox->blockSignals(false);
+}
+
+void InitConfigurator::initSliderDouble(const BlockSignals<QSlider *> &spinBox,const Settings::SettingsEntryInt &entry)
+{
+	spinBox->setValue(entry.value());
+}
+
diff --git a/src/InitConfigurator.h b/src/InitConfigurator.h
index 8533a2be3..f1f2247c8 100644
--- a/src/InitConfigurator.h
+++ b/src/InitConfigurator.h
@@ -39,4 +39,8 @@ protected:
 	void updateComboBox(const BlockSignals<QComboBox *> &comboBox,const Settings::SettingsEntryEnum &entry);
 	/** Update combobox from current settings */
 	void updateComboBox(const BlockSignals<QComboBox *> &comboBox,const std::string &value);
-};
\ No newline at end of file
+	/** Initialize slider min/max values from the settings range values */
+	void initSliderRange(const BlockSignals<QSlider *> &spinBox,const Settings::SettingsEntryInt &entry);
+	/** Initialize slider double value from the settings value */
+	void initSliderDouble(const BlockSignals<QSlider *> &spinBox, const Settings::SettingsEntryInt &entry);
+};
diff --git a/src/MainWindow.cc b/src/MainWindow.cc
index 58f9c1310..4774705ef 100755
--- a/src/MainWindow.cc
+++ b/src/MainWindow.cc
@@ -443,6 +443,7 @@ MainWindow::MainWindow(const QStringList &filenames)
 	connect(this->viewActionViewAll, SIGNAL(triggered()), this, SLOT(viewAll()));
 	connect(this->viewActionPerspective, SIGNAL(triggered()), this, SLOT(viewPerspective()));
 	connect(this->viewActionOrthogonal, SIGNAL(triggered()), this, SLOT(viewOrthogonal()));
+	connect(this->viewActionAnaglyph, SIGNAL(triggered()), this, SLOT(viewAnaglyph()));
 	connect(this->viewActionZoomIn, SIGNAL(triggered()), qglview, SLOT(ZoomIn()));
 	connect(this->viewActionZoomOut, SIGNAL(triggered()), qglview, SLOT(ZoomOut()));
 	connect(this->viewActionHideEditorToolBar, SIGNAL(triggered()), this, SLOT(hideEditorToolbar()));
@@ -491,6 +492,7 @@ MainWindow::MainWindow(const QStringList &filenames)
 					this, SLOT(openCSGSettingsChanged()));
 	connect(Preferences::inst(), SIGNAL(colorSchemeChanged(const QString&)),
 					this, SLOT(setColorScheme(const QString&)));
+	connect(Preferences::inst(), SIGNAL(anaglyphSettingsChanged()), this, SLOT(updateAnaglyph()));
 
 	Preferences::inst()->apply_win(); // not sure if to be commented, checked must not be commented(done some changes in apply())
 
@@ -546,6 +548,7 @@ MainWindow::MainWindow(const QStringList &filenames)
 	initActionIcon(viewActionThrownTogether, ":/resources/icons/svg-default/throwntogether.svg", ":/resources/icons/svg-default/throwntogether-white.svg");
 	initActionIcon(viewActionPerspective, ":/resources/icons/svg-default/perspective.svg", ":/resources/icons/svg-default/perspective-white.svg");
 	initActionIcon(viewActionOrthogonal, ":/resources/icons/svg-default/orthogonal.svg", ":/resources/icons/svg-default/orthogonal-white.svg");
+	initActionIcon(viewActionAnaglyph, ":/resources/icons/svg-default/anaglyph.svg", ":/resources/icons/svg-default/anaglyph-white.svg");
 	initActionIcon(designActionPreview, ":/resources/icons/svg-default/preview.svg", ":/resources/icons/svg-default/preview-white.svg");
 	initActionIcon(viewActionAnimate, ":/resources/icons/svg-default/animate.svg", ":/resources/icons/svg-default/animate-white.svg");
 	initActionIcon(fileActionExportSTL, ":/resources/icons/svg-default/export-stl.svg", ":/resources/icons/svg-default/export-stl-white.svg");
@@ -772,7 +775,9 @@ void MainWindow::loadViewSettings(){
         viewActionShowScaleProportional->setChecked(true);
         viewModeShowScaleProportional();
     }
-	if (settings.value("view/orthogonalProjection").toBool()) {
+	if (settings.value("view/anaglyphProjection").toBool()) {
+		viewAnaglyph();
+	} else if (settings.value("view/orthogonalProjection").toBool()) {
 		viewOrthogonal();
 	} else {
 		viewPerspective();
@@ -2788,9 +2793,12 @@ void MainWindow::viewCenter()
 void MainWindow::viewPerspective()
 {
 	QSettingsCached settings;
+	ColorMap::setAnaglyphMode(false);
 	settings.setValue("view/orthogonalProjection",false);
+	settings.setValue("view/anaglyphProjection",false);
 	viewActionPerspective->setChecked(true);
 	viewActionOrthogonal->setChecked(false);
+	viewActionAnaglyph->setChecked(false);
 	this->qglview->setOrthoMode(false);
 	this->qglview->updateGL();
 }
@@ -2798,13 +2806,29 @@ void MainWindow::viewPerspective()
 void MainWindow::viewOrthogonal()
 {
 	QSettingsCached settings;
+	ColorMap::setAnaglyphMode(false);
 	settings.setValue("view/orthogonalProjection",true);
+	settings.setValue("view/anaglyphProjection",false);
 	viewActionPerspective->setChecked(false);
 	viewActionOrthogonal->setChecked(true);
+	viewActionAnaglyph->setChecked(false);
 	this->qglview->setOrthoMode(true);
 	this->qglview->updateGL();
 }
 
+void MainWindow::viewAnaglyph()
+{
+	QSettingsCached settings;
+	ColorMap::setAnaglyphMode(true);
+	settings.setValue("view/orthogonalProjection",false);
+	settings.setValue("view/anaglyphProjection",true);
+	viewActionPerspective->setChecked(false);
+	viewActionOrthogonal->setChecked(false);
+	viewActionAnaglyph->setChecked(true);
+	this->qglview->setAnaglyphMode(true);
+	this->qglview->updateGL();
+}
+
 void MainWindow::viewTogglePerspective()
 {
 	QSettingsCached settings;
@@ -3236,6 +3260,13 @@ void MainWindow::setFont(const QString &family, uint size)
 	activeEditor->setFont(font);
 }
 
+void MainWindow::updateAnaglyph() {
+	this->qglview->setEyeSeparation(Settings::Settings::eyeSeparation.value() * 0.1);
+	this->qglview->setOutOfScreen(Settings::Settings::outOfScreen.value() * 0.1);
+	this->qglview->setNearClippingPlane(Settings::Settings::nearClippingPlane.value() * 0.1);
+	this->qglview->updateGL();
+}
+
 void MainWindow::quit()
 {
 	QCloseEvent ev;
diff --git a/src/MainWindow.h b/src/MainWindow.h
index b5a3af25d..becaed55c 100644
--- a/src/MainWindow.h
+++ b/src/MainWindow.h
@@ -98,6 +98,7 @@ private slots:
 	void updatedAnimSteps();
 	void updatedAnimDump(bool checked);
 	void updateTVal();
+	void updateAnaglyph();
 	void updateUndockMode(bool undockMode);
 	void updateReorderMode(bool reorderMode);
 	void setFont(const QString &family, uint size);
@@ -303,6 +304,7 @@ public slots:
 	void viewCenter();
 	void viewPerspective();
 	void viewOrthogonal();
+	void viewAnaglyph();
 	void viewTogglePerspective();
 	void viewResetView();
 	void viewAll();
diff --git a/src/MainWindow.ui b/src/MainWindow.ui
index dc72b2751..a95c0f7d6 100644
--- a/src/MainWindow.ui
+++ b/src/MainWindow.ui
@@ -251,6 +251,7 @@
          <addaction name="separator"/>
          <addaction name="viewActionPerspective"/>
          <addaction name="viewActionOrthogonal"/>
+         <addaction name="viewActionAnaglyph"/>
          <addaction name="separator"/>
          <addaction name="viewActionShowAxes"/>
          <addaction name="viewActionShowScaleProportional"/>
@@ -413,6 +414,7 @@
     <addaction name="separator"/>
     <addaction name="viewActionPerspective"/>
     <addaction name="viewActionOrthogonal"/>
+    <addaction name="viewActionAnaglyph"/>
     <addaction name="separator"/>
     <addaction name="viewActionHideEditorToolBar"/>
     <addaction name="viewActionHide3DViewToolBar"/>
@@ -1181,6 +1183,9 @@
    <property name="text">
     <string>&amp;Perspective</string>
    </property>
+   <property name="shortcut">
+    <string>Alt+2</string>
+   </property>
   </action>
   <action name="viewActionOrthogonal">
    <property name="checkable">
@@ -1189,6 +1194,23 @@
    <property name="text">
     <string>&amp;Orthogonal</string>
    </property>
+   <property name="shortcut">
+    <string>Alt+1</string>
+   </property>
+  </action>
+  <action name="viewActionAnaglyph">
+   <property name="checkable">
+    <bool>true</bool>
+   </property>
+   <property name="text">
+    <string>&amp;Stereo Vision (Anaglyph)</string>
+   </property>
+   <property name="toolTip">
+    <string>Stereo Vision (Anaglyph) - requires special red-cyan glasses</string>
+   </property>
+   <property name="shortcut">
+    <string>Alt+3</string>
+   </property>
   </action>
   <action name="windowActionHideConsole">
    <property name="checkable">
diff --git a/src/Preferences.cc b/src/Preferences.cc
index d4eb6a062..dd4d51081 100644
--- a/src/Preferences.cc
+++ b/src/Preferences.cc
@@ -182,6 +182,10 @@ void Preferences::init() {
 	this->lineEditCharacterThreshold->setValidator(validator1);
 	this->lineEditStepSize->setValidator(validator1);
 
+	initSliderRange(this->horizontalSliderEyeSeparation, Settings::Settings::eyeSeparation);
+	initSliderRange(this->horizontalSliderOutOfScreen, Settings::Settings::outOfScreen);
+	initSliderRange(this->horizontalSliderNearClippingPlane, Settings::Settings::nearClippingPlane);
+
 	initComboBox(this->comboBoxIndentUsing, Settings::Settings::indentStyle);
 	initComboBox(this->comboBoxLineWrap, Settings::Settings::lineWrap);
 	initComboBox(this->comboBoxLineWrapIndentationStyle, Settings::Settings::lineWrapIndentationStyle);
@@ -823,6 +827,27 @@ void Preferences::on_comboBoxOctoPrintSlicingProfile_activated(int val)
 	writeSettings();
 }
 
+void Preferences::on_horizontalSliderEyeSeparation_valueChanged(int val)
+{
+	Settings::Settings::eyeSeparation.setValue(val);
+	writeSettings();
+	emit anaglyphSettingsChanged();
+}
+
+void Preferences::on_horizontalSliderOutOfScreen_valueChanged(int val)
+{
+	Settings::Settings::outOfScreen.setValue(val);
+	writeSettings();
+	emit anaglyphSettingsChanged();
+}
+
+void Preferences::on_horizontalSliderNearClippingPlane_valueChanged(int val)
+{
+	Settings::Settings::nearClippingPlane.setValue(val);
+	writeSettings();
+	emit anaglyphSettingsChanged();
+}
+
 void Preferences::writeSettings()
 {
 	Settings::Settings::visit(SettingsWriter());
@@ -966,6 +991,10 @@ void Preferences::updateGUI()
 	this->lineEditCharacterThreshold->setEnabled(getValue("editor/enableAutocomplete").toBool());
 	this->lineEditStepSize->setEnabled(getValue("editor/stepSize").toBool());
 
+	initSliderDouble(this->horizontalSliderEyeSeparation, Settings::Settings::eyeSeparation);
+	initSliderDouble(this->horizontalSliderOutOfScreen, Settings::Settings::outOfScreen);
+	initSliderDouble(this->horizontalSliderNearClippingPlane, Settings::Settings::nearClippingPlane);
+
 	updateComboBox(this->comboBoxLineWrap, Settings::Settings::lineWrap);
 	updateComboBox(this->comboBoxLineWrapIndentationStyle, Settings::Settings::lineWrapIndentationStyle);
 	updateComboBox(this->comboBoxLineWrapVisualizationStart, Settings::Settings::lineWrapVisualizationBegin);
diff --git a/src/Preferences.h b/src/Preferences.h
index 69a268d9c..12fadcfb0 100644
--- a/src/Preferences.h
+++ b/src/Preferences.h
@@ -64,6 +64,9 @@ public slots:
 	void on_consoleFontSize_currentIndexChanged(const QString &);
 	void on_checkBoxEnableAutocomplete_toggled(bool);
 	void on_lineEditCharacterThreshold_textChanged(const QString &);
+	void on_horizontalSliderEyeSeparation_valueChanged(int);
+	void on_horizontalSliderOutOfScreen_valueChanged(int);
+	void on_horizontalSliderNearClippingPlane_valueChanged(int);
   //
 	// editor settings
   //
@@ -112,6 +115,7 @@ signals:
 	void consoleFontChanged(const QString &family, uint size) const;
 	void colorSchemeChanged(const QString &scheme) const;
 	void openCSGSettingsChanged() const;
+	void anaglyphSettingsChanged() const;
 	void syntaxHighlightChanged(const QString &s) const;
 	void editorConfigChanged() const;
 	void ExperimentalChanged() const ;
diff --git a/src/Preferences.ui b/src/Preferences.ui
index f485faf9a..2e7f5b920 100644
--- a/src/Preferences.ui
+++ b/src/Preferences.ui
@@ -87,6 +87,70 @@
           </item>
          </layout>
         </item>
+        <item>
+         <layout class="QFormLayout" name="formLayout">
+          <item row="0" column="0">
+           <widget class="QLabel" name="label_14">
+            <property name="text">
+             <string>Eye Separation</string>
+            </property>
+           </widget>
+          </item>
+          <item row="0" column="1">
+           <widget class="QSlider" name="horizontalSliderEyeSeparation">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="tickPosition">
+             <enum>QSlider::TicksAbove</enum>
+            </property>
+            <property name="tickInterval">
+             <number>500</number>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="0">
+           <widget class="QLabel" name="label_13">
+            <property name="text">
+             <string>Out of Screen</string>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="1">
+           <widget class="QSlider" name="horizontalSliderOutOfScreen">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="tickPosition">
+             <enum>QSlider::TicksAbove</enum>
+            </property>
+            <property name="tickInterval">
+             <number>250</number>
+            </property>
+           </widget>
+          </item>
+          <item row="2" column="0">
+           <widget class="QLabel" name="label_12">
+            <property name="text">
+             <string>Near Clipping Plane</string>
+            </property>
+           </widget>
+          </item>
+          <item row="2" column="1">
+           <widget class="QSlider" name="horizontalSliderNearClippingPlane">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="tickPosition">
+             <enum>QSlider::TicksAbove</enum>
+            </property>
+            <property name="tickInterval">
+             <number>500</number>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
         <item>
          <widget class="QCheckBox" name="checkBoxShowWarningsIn3dView">
           <property name="text">
diff --git a/src/QGLView.cc b/src/QGLView.cc
index 0234ea662..416c4bb3d 100644
--- a/src/QGLView.cc
+++ b/src/QGLView.cc
@@ -373,6 +373,12 @@ void QGLView::setOrthoMode(bool enabled)
 	else this->cam.setProjection(Camera::ProjectionType::PERSPECTIVE);
 }
 
+void QGLView::setAnaglyphMode(bool enabled)
+{
+	if (enabled) this->cam.setProjection(Camera::ProjectionType::ANAGLYPH);
+	else this->cam.setProjection(Camera::ProjectionType::PERSPECTIVE);
+}
+
 void QGLView::translate(double x, double y, double z, bool relative, bool viewPortRelative)
 {
     Matrix3d aax, aay, aaz;
diff --git a/src/QGLView.h b/src/QGLView.h
index 195852972..1a45aec11 100644
--- a/src/QGLView.h
+++ b/src/QGLView.h
@@ -29,6 +29,7 @@ class QGLView :
 	Q_PROPERTY(bool showAxes READ showAxes WRITE setShowAxes);
 	Q_PROPERTY(bool showCrosshairs READ showCrosshairs WRITE setShowCrosshairs);
 	Q_PROPERTY(bool orthoMode READ orthoMode WRITE setOrthoMode);
+	Q_PROPERTY(bool anaglyphMode READ anaglyphMode WRITE setAnaglyphMode);
 	Q_PROPERTY(double showScaleProportional READ showScaleProportional WRITE setShowScaleProportional);
 
 public:
@@ -39,6 +40,8 @@ public:
 	// Properties
 	bool orthoMode() const { return (this->cam.projection == Camera::ProjectionType::ORTHOGONAL); }
 	void setOrthoMode(bool enabled);
+	bool anaglyphMode() const { return (this->cam.projection == Camera::ProjectionType::ANAGLYPH); }
+	void setAnaglyphMode(bool enabled);
 	bool showScaleProportional() const { return this->showscale; }
 	void setShowScaleProportional(bool enabled) { this->showscale = enabled; }
 	std::string getRendererInfo() const override;
diff --git a/src/Settings.cc b/src/Settings.cc
index 8437bb7d6..9dec9c0dc 100644
--- a/src/Settings.cc
+++ b/src/Settings.cc
@@ -93,6 +93,9 @@ static std::vector<SettingsEntryEnum::Item> axisValues() {
 
 SettingsEntryBool   Settings::showWarningsIn3dView("3dview", "showWarningsIn3dView", true);
 SettingsEntryBool   Settings::mouseCentricZoom("3dview", "mouseCentricZoom", true);
+SettingsEntryInt    Settings::eyeSeparation("3dview", "eyeSeparation", 0, 2000, 1000); // in 0.1%
+SettingsEntryInt    Settings::outOfScreen("3dview", "outOfScreen", 0, 1000, 0); // in 0.1%
+SettingsEntryInt    Settings::nearClippingPlane("3dview", "nearClippingPlane", 0, 2000, 300); // in 0.1%
 SettingsEntryInt    Settings::indentationWidth("editor", "indentationWidth", 1, 16, 4);
 SettingsEntryInt    Settings::tabWidth("editor", "tabWidth", 1, 16, 4);
 SettingsEntryEnum   Settings::lineWrap("editor", "lineWrap", {{"None", _("None")}, {"Char", _("Wrap at character boundaries")}, {"Word", _("Wrap at word boundaries")}}, "Word");
diff --git a/src/Settings.h b/src/Settings.h
index 86bf6e58a..6935a9b8a 100644
--- a/src/Settings.h
+++ b/src/Settings.h
@@ -158,6 +158,9 @@ class Settings
 public:
 	static SettingsEntryBool   showWarningsIn3dView;
 	static SettingsEntryBool   mouseCentricZoom;
+        static SettingsEntryInt    eyeSeparation;
+        static SettingsEntryInt    outOfScreen;
+        static SettingsEntryInt    nearClippingPlane;
 	static SettingsEntryInt    indentationWidth;
 	static SettingsEntryInt    tabWidth;
 	static SettingsEntryEnum   lineWrap;
diff --git a/src/colormap.cc b/src/colormap.cc
index 6b794be17..675b6da40 100644
--- a/src/colormap.cc
+++ b/src/colormap.cc
@@ -8,6 +8,7 @@
 namespace fs = boost::filesystem;
 
 static const char *DEFAULT_COLOR_SCHEME_NAME = "Cornfield";
+bool ColorMap::anaglyphmode = false;
 
 // See http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv
 static void rgbtohsv(float r, float g, float b, float &h, float &s, float &v)
@@ -37,6 +38,7 @@ RenderColorScheme::RenderColorScheme() : _path("")
   _show_in_gui = true;
 
   _color_scheme.insert(ColorScheme::value_type(RenderColor::BACKGROUND_COLOR, Color4f(0xff, 0xff, 0xe5)));
+  _color_scheme.insert(ColorScheme::value_type(RenderColor::HIGHLIGHT_COLOR, Color4f(0xff, 0x51, 0x51, 0x80))); // 50% transparencency
   _color_scheme.insert(ColorScheme::value_type(RenderColor::AXES_COLOR, Color4f(0x00, 0x00, 0x00)));
   _color_scheme.insert(ColorScheme::value_type(RenderColor::OPENCSG_FACE_FRONT_COLOR, Color4f(0xf9, 0xd7, 0x2c)));
   _color_scheme.insert(ColorScheme::value_type(RenderColor::OPENCSG_FACE_BACK_COLOR, Color4f(0x9d, 0xcb, 0x51)));
@@ -58,6 +60,7 @@ RenderColorScheme::RenderColorScheme(fs::path path) : _path(path)
 	_show_in_gui = pt.get<bool>("show-in-gui");
 	
 	addColor(RenderColor::BACKGROUND_COLOR, "background");
+	addColor(RenderColor::HIGHLIGHT_COLOR, "highlight");
 	addColor(RenderColor::AXES_COLOR, "axes-color");
 	addColor(RenderColor::OPENCSG_FACE_FRONT_COLOR, "opencsg-face-front");
 	addColor(RenderColor::OPENCSG_FACE_BACK_COLOR, "opencsg-face-back");
@@ -132,6 +135,14 @@ void RenderColorScheme::addColor(RenderColor colorKey, std::string key)
     int g = (val >> 8) & 0xff;
     int b = val & 0xff;
     _color_scheme.insert(ColorScheme::value_type(colorKey, Color4f(r, g, b)));
+  } else if ((color.length() == 9) && (color.at(0) == '#')) {
+    char *endptr;
+    unsigned long int val = strtoul(color.substr(1).c_str(), &endptr, 16);
+    int r = (val >> 24) & 0xff;
+    int g = (val >> 16) & 0xff;
+    int b = (val >> 8) & 0xff;
+    int a = val & 0xff;
+    _color_scheme.insert(ColorScheme::value_type(colorKey, Color4f(r, g, b, a)));
   }
   else {
     throw std::invalid_argument(std::string("invalid color value for key '") + key + "': '" + color + "'");
@@ -217,9 +228,10 @@ std::list<std::string> ColorMap::colorSchemeNames(bool guiOnly) const
 
 Color4f ColorMap::getColor(const ColorScheme &cs, const RenderColor rc)
 {
-  if (cs.count(rc)) return cs.at(rc);
-  if (ColorMap::inst()->defaultColorScheme().count(rc)) return ColorMap::inst()->defaultColorScheme().at(rc);
-  return Color4f(0, 0, 0, 127);
+  Color4f c(0, 0, 0, 127);
+  if (cs.count(rc)) c =  cs.at(rc);
+  else if (ColorMap::inst()->defaultColorScheme().count(rc)) c = ColorMap::inst()->defaultColorScheme().at(rc);
+  return ColorMap::anaglyphColor(c);
 }
 
 Color4f ColorMap::getColorHSV(const Color4f &col)
@@ -306,3 +318,27 @@ ColorMap::colorscheme_set_t ColorMap::enumerateColorSchemes()
 
   return result_set;
 }
+
+/* Given rgb color, calculate closest color suitable for anaglyph.
+   This is the Dubois algorithm, with left and right pixel the same color.
+   https://www.site.uottawa.ca/~edubois/icassp01/anaglyphdubois.pdf
+ */
+
+Color4f ColorMap::anaglyphColor(const Color4f &c_in) {
+  Color4f c_out;
+  if (anaglyphmode) {
+    // Numbers are for lcd and red/cyan glasses, from "Producing Anaglyphs from Synthetic Images",
+    // https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.6968&rep=rep1&type=pdf#page=4
+    c_out[0] = (0.4561   -.0434706)*c_in[0]+ ( .500484 -.0879388)*c_in[1]+( .176381  -0.00155529)*c_in[2];
+    c_out[1] = (-.0400822+.378476) *c_in[0]+ (-.0378246+.73364)  *c_in[1]+(-.0157589  -.0184503) *c_in[2];
+    c_out[2] = (-.0152161-.0721527)*c_in[0]+ (-.0205971-.112961) *c_in[1]+(-.00546856+1.2264)    *c_in[2];
+    c_out[3] = c_in[3];
+    for (int i = 0; i < 3; i++) {
+      if (c_out[i] < 0.0) c_out[i] = 0.0;
+      else if (c_out[i] > 1.0) c_out[i] = 1.0;
+    }
+  } else {
+    c_out = c_in;
+  }
+  return c_out;
+}
diff --git a/src/colormap.h b/src/colormap.h
index a0dd9c350..06a859012 100644
--- a/src/colormap.h
+++ b/src/colormap.h
@@ -13,6 +13,7 @@ namespace fs = boost::filesystem;
 
 enum class RenderColor {
 	BACKGROUND_COLOR,
+	HIGHLIGHT_COLOR,
 	AXES_COLOR,
 	OPENCSG_FACE_FRONT_COLOR,
 	OPENCSG_FACE_BACK_COLOR,
@@ -81,6 +82,8 @@ public:
 	static Color4f getColor(const ColorScheme &cs, const RenderColor rc);
         static Color4f getContrastColor(const Color4f &col);
 	static Color4f getColorHSV(const Color4f &col);
+  static Color4f anaglyphColor(const Color4f &col);
+  static void setAnaglyphMode(bool enabled) { anaglyphmode = enabled; };
 	
 private:
 	ColorMap();
@@ -89,4 +92,5 @@ private:
         colorscheme_set_t enumerateColorSchemes();
         void enumerateColorSchemesInPath(colorscheme_set_t &result_set, const fs::path path);
         colorscheme_set_t colorSchemeSet;
+        static bool anaglyphmode;
 };
diff --git a/src/openscad.cc b/src/openscad.cc
index f8b4cfe05..8815ca984 100644
--- a/src/openscad.cc
+++ b/src/openscad.cc
@@ -240,8 +240,11 @@ Camera get_camera(const po::variables_map &vm)
 		else if (proj=="p" || proj=="perspective") {
 			camera.projection = Camera::ProjectionType::PERSPECTIVE;
 		}
+		else if (proj=="a" || proj=="anaglyph") {
+			camera.projection = Camera::ProjectionType::ANAGLYPH;
+		}
 		else {
-			LOG(message_group::None,Location::NONE,"","projection needs to be 'o' or 'p' for ortho or perspective\n");
+			LOG(message_group::None,Location::NONE,"","projection needs to be 'o', 'p' or 'a' for ortho, perspective or anaglyph\n");
 			exit(1);
 		}
 	}
@@ -979,7 +982,7 @@ int main(int argc, char **argv)
 		("preview", po::value<string>()->implicit_value(""), "[=throwntogether] -for ThrownTogether preview png")
 		("animate", po::value<unsigned>(), "export N animated frames")
 		("view", po::value<CommaSeparatedVector>(), ("=view options: " + boost::join(viewOptions.names(), " | ")).c_str())
-		("projection", po::value<string>(), "=(o)rtho or (p)erspective when exporting png")
+		("projection", po::value<string>(), "=(o)rtho, (p)erspective or (a)naglyph when exporting png")
 		("csglimit", po::value<unsigned int>(), "=n -stop rendering at n CSG elements when exporting png")
     ("summary", po::value<vector<string>>(), "enable additional render summary and statistics: all | cache | time | camera | geometry | bounding-box | area")
     ("summary-file", po::value<string>(), "output summary information in JSON format to the given file, using '-' outputs to stdout")
diff --git a/src/renderer.cc b/src/renderer.cc
index f3066fe4a..5660c0846 100644
--- a/src/renderer.cc
+++ b/src/renderer.cc
@@ -158,12 +158,13 @@ void Renderer::setColor(const float color[4], const shaderinfo_t *shaderinfo) co
 	PRINTD("setColor a");
 	Color4f col;
 	getColor(ColorMode::MATERIAL,col);
-	float c[4] = {color[0], color[1], color[2], color[3]};
+	Color4f c(color[0], color[1], color[2], color[3]);
+	c = ColorMap::anaglyphColor(c);
 	if (c[0] < 0) c[0] = col[0];
 	if (c[1] < 0) c[1] = col[1];
 	if (c[2] < 0) c[2] = col[2];
 	if (c[3] < 0) c[3] = col[3];
-	glColor4fv(c);
+	glColor4f(c[0], c[1], c[2], c[3]);
 #ifdef ENABLE_OPENCSG
 	if (shaderinfo) {
 		glUniform4f(shaderinfo->data.csg_rendering.color_area, c[0], c[1], c[2], c[3]);
@@ -213,6 +214,7 @@ void Renderer::setColorScheme(const ColorScheme &cs) {
 	colormap[ColorMode::MATERIAL_EDGES] = ColorMap::getColor(cs, RenderColor::CGAL_EDGE_FRONT_COLOR);
 	colormap[ColorMode::CUTOUT_EDGES] = ColorMap::getColor(cs, RenderColor::CGAL_EDGE_BACK_COLOR);
 	colormap[ColorMode::EMPTY_SPACE] = ColorMap::getColor(cs, RenderColor::BACKGROUND_COLOR);
+	colormap[ColorMode::HIGHLIGHT] = ColorMap::getColor(cs, RenderColor::HIGHLIGHT_COLOR);
 	this->colorscheme = &cs;
 }
 
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 678e55f13..59e12788a 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -1241,6 +1241,18 @@ add_cmdline_test(openscad-camvp-override EXE ${OPENSCAD_BINPATH}
                  SUFFIX png
                  FILES ${CMAKE_CURRENT_SOURCE_DIR}/data/scad/3D/misc/camera-vp.scad)
 
+# anaglyph
+
+add_cmdline_test(openscad-anaglyph-preview EXE ${OPENSCAD_BINPATH}
+                 ARGS --colorscheme=3D\ Glasses --projection=a --preview -o
+                 SUFFIX png
+                 FILES ${CMAKE_CURRENT_SOURCE_DIR}/../examples/Basics/logo.scad)
+
+add_cmdline_test(openscad-anaglyph-render EXE ${OPENSCAD_BINPATH}
+                 ARGS --colorscheme=3D\ Glasses --projection=a --render -o
+                 SUFFIX png
+                 FILES ${CMAKE_CURRENT_SOURCE_DIR}/../examples/Basics/logo.scad)
+
 # View Options tests
 add_cmdline_test(openscad-viewoptions-axes EXE ${OPENSCAD_BINPATH} ARGS --imgsize=500,500 --camera=16,14,13,0,0,0 --viewall --view axes -o SUFFIX png FILES ${CMAKE_CURRENT_SOURCE_DIR}/data/scad/3D/misc/view-options-tests.scad)
 add_cmdline_test(openscad-viewoptions-axes-scales EXE ${OPENSCAD_BINPATH} ARGS --imgsize=500,500 --camera=16,14,13,0,0,0 --viewall --view axes,scales -o SUFFIX png FILES ${CMAKE_CURRENT_SOURCE_DIR}/data/scad/3D/misc/view-options-tests.scad)
@@ -1274,6 +1286,10 @@ add_cmdline_test(openscad-colorscheme-metallic-render EXE ${OPENSCAD_BINPATH}
                  ARGS --colorscheme=Metallic --render -o 
                  SUFFIX png 
                  FILES ${CMAKE_CURRENT_SOURCE_DIR}/../examples/Basics/CSG.scad)
+add_cmdline_test(openscad-colorscheme-3dglasses EXE ${OPENSCAD_BINPATH}
+                 ARGS --colorscheme 3D\ Glasses -o
+                 SUFFIX png
+                 FILES ${CMAKE_CURRENT_SOURCE_DIR}/../examples/Basics/logo.scad)
 
 #message("Available test configurations: ${TEST_CONFIGS}")
 #foreach(CONF ${TEST_CONFIGS})

commit c7ea679e2ad8d2f69d48d2621cc21884ba47937d
Author: Koen De Vleeschauwer <kdv@kdvelectronics.eu>
Date:   Mon Mar 8 11:32:13 2021 +0100

    anaglyph

diff --git a/color-schemes/render/beforedawn.json b/color-schemes/render/beforedawn.json
index d4d98bba9..0f05c2f85 100644
--- a/color-schemes/render/beforedawn.json
+++ b/color-schemes/render/beforedawn.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#333333",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#c1c1c1",
         "opencsg-face-front" : "#cccccc",
         "opencsg-face-back" :  "#5563dd",
diff --git a/color-schemes/render/deepocean.json b/color-schemes/render/deepocean.json
index 9ce164fdc..f5179c583 100644
--- a/color-schemes/render/deepocean.json
+++ b/color-schemes/render/deepocean.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#333333",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#c1c1c1",
         "opencsg-face-front" : "#eeeeee",
         "opencsg-face-back" :  "#0babc8",
diff --git a/color-schemes/render/gencolorscheme.py b/color-schemes/render/gencolorscheme.py
new file mode 100755
index 000000000..b09b99001
--- /dev/null
+++ b/color-schemes/render/gencolorscheme.py
@@ -0,0 +1,58 @@
+#!/usr/bin/python3
+# print openscad color scheme
+#
+# $ ./gencolorscheme.py > redcyanglasses.json
+#
+
+import colorsys
+
+# print rgb as hex string
+# r=0..255, g=0..255, b=0.255
+def rgb(r, g, b):
+  hexval = hex(256*256*256+r*256*256+g*256+b)
+  return hexval[3:9]
+
+# print hsv as hex string
+# h=0..360, s=0..100, v=0..100
+def hsv(h, s, v):
+  color = tuple(int(round(i * 255)) for i in colorsys.hsv_to_rgb(h/360.0,s/100.0,v/100.0))
+  return rgb(color[0], color[1], color[2])
+
+# color scheme
+background =         rgb(255,255,255)
+highlight =          hsv(0,0,20)
+axes_color =         hsv(290,50,100)
+opencsg_face_front = hsv(75,50,100)
+opencsg_face_back =  hsv(285,50,100)
+cgal_face_front =    hsv(75,50,100)
+cgal_face_back =     hsv(285,50,100)
+cgal_face_2d =       hsv(90,50,100)
+cgal_edge_front =    hsv(75,50,100)
+cgal_edge_back =     hsv(290,50,100)
+cgal_edge_2d =       hsv(275,50,100)
+crosshair =          hsv(290,50,50)
+
+print (f'''{{
+    "name" : "3D Glasses",
+    "index" : 2001,
+    "show-in-gui" : true,
+    "description" : "3d anaglyph",
+    "_comment" : "created by gencolorscheme.py",
+
+    "colors" : {{
+        "background" :         "#{background}",
+        "highlight" :          "#{highlight}80",
+        "axes-color" :         "#{axes_color}",
+        "opencsg-face-front" : "#{opencsg_face_front}",
+        "opencsg-face-back" :  "#{opencsg_face_back}",
+        "cgal-face-front" :    "#{cgal_face_front}",
+        "cgal-face-back" :     "#{cgal_face_back}",
+        "cgal-face-2d" :       "#{cgal_face_2d}",
+        "cgal-edge-front" :    "#{cgal_edge_front}",
+        "cgal-edge-back" :     "#{cgal_edge_back}",
+        "cgal-edge-2d" :       "#{cgal_edge_2d}",
+        "crosshair" :          "#{crosshair}"
+    }}
+}}''')
+
+#not truncated
diff --git a/color-schemes/render/metallic.json b/color-schemes/render/metallic.json
index 838558769..08e91129e 100644
--- a/color-schemes/render/metallic.json
+++ b/color-schemes/render/metallic.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#aaaaff",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#222233",
         "opencsg-face-front" : "#ddddff",
         "opencsg-face-back" :  "#dd22dd",
diff --git a/color-schemes/render/monotone.json b/color-schemes/render/monotone.json
index df1a79aa7..06cb8f8d9 100644
--- a/color-schemes/render/monotone.json
+++ b/color-schemes/render/monotone.json
@@ -6,6 +6,7 @@
 
     "colors" : {
         "background" :         "#ffffe5",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#191916",
         "opencsg-face-front" : "#f9d72c",
         "opencsg-face-back" :  "#f9d72c",
diff --git a/color-schemes/render/nature.json b/color-schemes/render/nature.json
index 6250e7a33..b71ec0b44 100644
--- a/color-schemes/render/nature.json
+++ b/color-schemes/render/nature.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#fafafa",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#323232",
         "opencsg-face-front" : "#16a085",
         "opencsg-face-back" :  "#dbf4da",
diff --git a/color-schemes/render/redcyanglasses.json b/color-schemes/render/redcyanglasses.json
new file mode 100644
index 000000000..94a843c6f
--- /dev/null
+++ b/color-schemes/render/redcyanglasses.json
@@ -0,0 +1,22 @@
+{
+    "name" : "3D Glasses",
+    "index" : 2001,
+    "show-in-gui" : true,
+    "description" : "3d anaglyph",
+    "_comment" : "created by gencolorscheme.py",
+
+    "colors" : {
+        "background" :         "#ffffff",
+        "highlight" :          "#33333380",
+        "axes-color" :         "#ea80ff",
+        "opencsg-face-front" : "#dfff80",
+        "opencsg-face-back" :  "#df80ff",
+        "cgal-face-front" :    "#dfff80",
+        "cgal-face-back" :     "#df80ff",
+        "cgal-face-2d" :       "#bfff80",
+        "cgal-edge-front" :    "#dfff80",
+        "cgal-edge-back" :     "#ea80ff",
+        "cgal-edge-2d" :       "#ca80ff",
+        "crosshair" :          "#754080"
+    }
+}
diff --git a/color-schemes/render/solarized.json b/color-schemes/render/solarized.json
index 0fd5002b1..f7c482d4b 100644
--- a/color-schemes/render/solarized.json
+++ b/color-schemes/render/solarized.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#fdf6e3",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#191816",
         "opencsg-face-front" : "#b58800",
         "opencsg-face-back" :  "#882233",
diff --git a/color-schemes/render/starnight.json b/color-schemes/render/starnight.json
index 88a9510c3..6e076a377 100644
--- a/color-schemes/render/starnight.json
+++ b/color-schemes/render/starnight.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#000000",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#e5e5e5",
         "opencsg-face-front" : "#ffffe0",
         "opencsg-face-back" :  "#00ffff",
diff --git a/color-schemes/render/sunset.json b/color-schemes/render/sunset.json
index bd7ae26b1..c22880d37 100644
--- a/color-schemes/render/sunset.json
+++ b/color-schemes/render/sunset.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#aa4444",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#220d0d",
         "opencsg-face-front" : "#ffaaaa",
         "opencsg-face-back" :  "#882233",
diff --git a/color-schemes/render/tomorrow-night.json b/color-schemes/render/tomorrow-night.json
index 8b7966c0a..90363a2b9 100644
--- a/color-schemes/render/tomorrow-night.json
+++ b/color-schemes/render/tomorrow-night.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#1d1f21",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#e8e8e8",
         "opencsg-face-front" : "#81a2be",
         "opencsg-face-back" :  "#de935f",
diff --git a/color-schemes/render/tomorrow.json b/color-schemes/render/tomorrow.json
index 559e23fe3..1b098cbe1 100644
--- a/color-schemes/render/tomorrow.json
+++ b/color-schemes/render/tomorrow.json
@@ -5,6 +5,7 @@
 
     "colors" : {
         "background" :         "#f8f8f8",
+        "highlight" :          "#ff515180",
         "axes-color" :         "#181818",
         "opencsg-face-front" : "#4271ae",
         "opencsg-face-back" :  "#f5871f",
diff --git a/images/Anaglyph-white.png b/images/Anaglyph-white.png
new file mode 100644
index 000000000..dfaa6fb15
Binary files /dev/null and b/images/Anaglyph-white.png differ
diff --git a/images/Anaglyph.png b/images/Anaglyph.png
new file mode 100644
index 000000000..b7bc5c4a0
Binary files /dev/null and b/images/Anaglyph.png differ
diff --git a/openscad.qrc b/openscad.qrc
index 0b143032c..c68cba391 100644
--- a/openscad.qrc
+++ b/openscad.qrc
@@ -106,6 +106,8 @@
     <file>images/SVG-white.png</file>
     <file>images/PDF.png</file>
     <file>images/PDF-white.png</file>
+    <file>images/Anaglyph.png</file>
+    <file>images/Anaglyph-white.png</file>
     <file>sounds/complete.wav</file>
   </qresource>
 </RCC>
diff --git a/src/Camera.h b/src/Camera.h
index 4cd2859c3..17e326edc 100644
--- a/src/Camera.h
+++ b/src/Camera.h
@@ -24,7 +24,7 @@ projection, Perspective and Orthogonal.
 class Camera
 {
 public:
-	enum class ProjectionType { ORTHOGONAL, PERSPECTIVE } projection;
+	enum class ProjectionType { ORTHOGONAL, PERSPECTIVE, ANAGLYPH } projection;
 	Camera();
 	void setup(std::vector<double> params);
 	void gimbalDefaultTranslate();
diff --git a/src/GLView.cc b/src/GLView.cc
index 766387736..32fea7354 100644
--- a/src/GLView.cc
+++ b/src/GLView.cc
@@ -3,6 +3,7 @@
 #include "stdio.h"
 #include "colormap.h"
 #include "rendersettings.h"
+#include "settings.h"
 #include "printutils.h"
 #include "renderer.h"
 #include "degree_trig.h"
@@ -80,6 +81,107 @@ void GLView::resizeGL(int w, int h)
 	if (this->renderer) { this->renderer->resize(cam.pixel_width,cam.pixel_height); }
 }
 
+/* 3d anaglyph - set up camera for left or right eye */
+/* after https://quiescentspark.blogspot.com/2011/05/rendering-3d-anaglyph-in-opengl.html */
+void GLView::setup3dCamera(bool leftCamera) {
+  double eyeSeparation = Settings::Settings::inst()->get(Settings::Settings::eyeSeparation).toDouble() * 0.1;
+  double outOfScreen = Settings::Settings::inst()->get(Settings::Settings::outOfScreen).toDouble() * 0.1;
+  double nearClippingPlane = Settings::Settings::inst()->get(Settings::Settings::nearClippingPlane).toDouble() * 0.1;
+  float left, right, bottom, top;
+  float convergence = (float)cam.zoomValue();
+  float aspectRatio = aspectratio;
+  float fov = cam.fov;
+  double offset = - cam.zoomValue() * outOfScreen * 0.01;
+  float nearClippingDistance = 0.01 * cam.zoomValue() * nearClippingPlane;
+  float farClippingDistance = 100.0 * cam.zoomValue() * nearClippingPlane; // ratio of 10000 between near and far- ought to be no problem for floats
+
+  // calculate frustum
+  top = nearClippingDistance * tan_degrees(fov / 2.0);
+  bottom = -top;
+  float a = aspectRatio * tan_degrees(fov / 2.0) * convergence;
+  float b = a - eyeSeparation / 2;
+  float c = a + eyeSeparation / 2;
+  if (leftCamera) { // left camera
+    left = -b * nearClippingDistance / convergence;
+    right = c * nearClippingDistance / convergence;
+  }
+  else { // right camera
+    left = -c * nearClippingDistance / convergence;
+    right = b * nearClippingDistance / convergence;
+  }
+
+  glMatrixMode(GL_PROJECTION);
+  glLoadIdentity();
+  glFrustum(left, right, bottom, top, nearClippingDistance, farClippingDistance);
+  glMatrixMode(GL_MODELVIEW);
+  glLoadIdentity();
+  if (leftCamera) { // left camera
+    glTranslatef(eyeSeparation / 2, 0.0, 0.0);
+  }
+  else { // right camera
+    glTranslatef(-eyeSeparation / 2, 0.0, 0.0);
+  }
+  glTranslatef(0.0, 0.0, offset);
+  gluLookAt(0.0, -cam.zoomValue(), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
+  glRotated(cam.object_rot.x(), 1.0, 0.0, 0.0);
+  glRotated(cam.object_rot.y(), 0.0, 1.0, 0.0);
+  glRotated(cam.object_rot.z(), 0.0, 0.0, 1.0);
+}
+
+/* 3d anaglyph - paint one eye */
+
+void GLView::paintOnce()
+{
+  auto crosshaircol = ColorMap::getColor(*this->colorscheme, RenderColor::CROSSHAIR_COLOR);
+  // The crosshair should be fixed at the center of the viewport...
+  if (showcrosshairs) GLView::showCrosshairs(crosshaircol);
+  glTranslated(cam.object_trans.x(), cam.object_trans.y(), cam.object_trans.z());
+  // ...the axis lines need to follow the object translation.
+  auto axescolor = ColorMap::getColor(*this->colorscheme, RenderColor::AXES_COLOR);
+  if (showaxes) GLView::showAxes(axescolor);
+  // mark the scale along the axis lines
+  if (showaxes && showscale) GLView::showScalemarkers(axescolor);
+
+  glEnable(GL_LIGHTING);
+  glDepthFunc(GL_LESS);
+  glCullFace(GL_BACK);
+  glDisable(GL_CULL_FACE);
+  glLineWidth(2);
+  glColor3d(1.0, 0.0, 0.0);
+
+  if (this->renderer) {
+#if defined(ENABLE_OPENCSG)
+    OpenCSG::setContext(this->opencsg_id);
+#endif
+    this->renderer->prepare(showfaces, showedges);
+    this->renderer->draw(showfaces, showedges);
+  }
+
+  glDisable(GL_LIGHTING);
+}
+
+/* 3d anaglyph - paint both eyes */
+
+void GLView::paint3dAnaglyph() {
+  glDisable(GL_LIGHTING);
+  auto bgcol = ColorMap::getColor(*this->colorscheme, RenderColor::BACKGROUND_COLOR);
+  glClearColor(bgcol[0], bgcol[1], bgcol[2], 1.0);
+
+  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
+  setup3dCamera(true); // left eye
+  glColorMask(true, false, false, false); // red
+  paintOnce();
+
+  glClear(GL_DEPTH_BUFFER_BIT);
+  setup3dCamera(false); // right eye
+  glColorMask(false, true, true, false); // cyan
+  paintOnce();
+
+  glColorMask(true, true, true, true);
+}
+
+/* 2D */
+
 void GLView::setCamera(const Camera &cam)
 {
   this->cam = cam;
@@ -117,6 +219,11 @@ void GLView::setupCamera() const
 
 void GLView::paintGL()
 {
+  if (this->cam.projection == Camera::ProjectionType::ANAGLYPH) {
+    paint3dAnaglyph();
+    return;
+  }
+
   glDisable(GL_LIGHTING);
   auto bgcol = ColorMap::getColor(*this->colorscheme, RenderColor::BACKGROUND_COLOR);
   auto axescolor = ColorMap::getColor(*this->colorscheme, RenderColor::AXES_COLOR);
diff --git a/src/GLView.h b/src/GLView.h
index 1fcd31bc8..2de658b9f 100644
--- a/src/GLView.h
+++ b/src/GLView.h
@@ -39,6 +39,10 @@ public:
 	void setCamera(const Camera &cam);
 	void setupCamera() const;
 
+	void setup3dCamera(bool leftCamera);
+	void paintOnce();
+	void paint3dAnaglyph();
+
 	void setColorScheme(const ColorScheme &cs);
 	void setColorScheme(const std::string &cs);
 	void updateColorScheme();
diff --git a/src/MainWindow.h b/src/MainWindow.h
index aaed0e139..25f08b381 100644
--- a/src/MainWindow.h
+++ b/src/MainWindow.h
@@ -299,6 +299,7 @@ public slots:
 	void viewCenter();
 	void viewPerspective();
 	void viewOrthogonal();
+	void viewAnaglyph();
 	void viewTogglePerspective();
 	void viewResetView();
 	void viewAll();
diff --git a/src/MainWindow.ui b/src/MainWindow.ui
index c3ea8e0e9..fed2af765 100644
--- a/src/MainWindow.ui
+++ b/src/MainWindow.ui
@@ -251,6 +251,7 @@
          <addaction name="separator"/>
          <addaction name="viewActionPerspective"/>
          <addaction name="viewActionOrthogonal"/>
+         <addaction name="viewActionAnaglyph"/>
          <addaction name="separator"/>
          <addaction name="viewActionShowAxes"/>
          <addaction name="viewActionShowScaleProportional"/>
@@ -413,6 +414,7 @@
     <addaction name="separator"/>
     <addaction name="viewActionPerspective"/>
     <addaction name="viewActionOrthogonal"/>
+    <addaction name="viewActionAnaglyph"/>
     <addaction name="separator"/>
     <addaction name="viewActionHideEditorToolBar"/>
     <addaction name="viewActionHide3DViewToolBar"/>
@@ -1302,6 +1304,24 @@
     <string>&amp;Orthogonal</string>
    </property>
   </action>
+  <action name="viewActionAnaglyph">
+   <property name="checkable">
+    <bool>true</bool>
+   </property>
+   <property name="icon">
+    <iconset resource="../openscad.qrc">
+     <normaloff>:/images/Anaglyph.png</normaloff>:/images/Anaglyph.png</iconset>
+   </property>
+   <property name="text">
+    <string>&amp;Stereo Vision (Anaglyph)</string>
+   </property>
+   <property name="toolTip">
+    <string>Stereo Vision (Anaglyph) - requires special red-cyan glasses</string>
+   </property>
+   <property name="shortcut">
+    <string>Alt+S</string>
+   </property>
+  </action>
   <action name="windowActionHideConsole">
    <property name="checkable">
     <bool>true</bool>
diff --git a/src/Preferences.cc b/src/Preferences.cc
index 17b09b47e..f809ea880 100644
--- a/src/Preferences.cc
+++ b/src/Preferences.cc
@@ -220,6 +220,10 @@ void Preferences::init() {
 	this->lineEditCharacterThreshold->setValidator(validator1);
 	this->lineEditStepSize->setValidator(validator1);
 
+	initSliderRange(this->horizontalSliderEyeSeparation, Settings::Settings::eyeSeparation);
+	initSliderRange(this->horizontalSliderOutOfScreen, Settings::Settings::outOfScreen);
+	initSliderRange(this->horizontalSliderNearClippingPlane, Settings::Settings::nearClippingPlane);
+
 	initComboBox(this->comboBoxIndentUsing, Settings::Settings::indentStyle);
 	initComboBox(this->comboBoxLineWrap, Settings::Settings::lineWrap);
 	initComboBox(this->comboBoxLineWrapIndentationStyle, Settings::Settings::lineWrapIndentationStyle);
@@ -845,6 +849,27 @@ void Preferences::on_comboBoxOctoPrintSlicingProfile_activated(int val)
 	writeSettings();
 }
 
+void Preferences::on_horizontalSliderEyeSeparation_valueChanged(int val)
+{
+	Settings::Settings::inst()->set(Settings::Settings::eyeSeparation, Value(val));
+	writeSettings();
+	emit requestRedraw();
+}
+
+void Preferences::on_horizontalSliderOutOfScreen_valueChanged(int val)
+{
+	Settings::Settings::inst()->set(Settings::Settings::outOfScreen, Value(val));
+	writeSettings();
+	emit requestRedraw();
+}
+
+void Preferences::on_horizontalSliderNearClippingPlane_valueChanged(int val)
+{
+	Settings::Settings::inst()->set(Settings::Settings::nearClippingPlane, Value(val));
+	writeSettings();
+	emit requestRedraw();
+}
+
 void Preferences::writeSettings()
 {
 	SettingsWriter settingsWriter;
@@ -986,6 +1011,10 @@ void Preferences::updateGUI()
 	this->lineEditCharacterThreshold->setEnabled(getValue("editor/enableAutocomplete").toBool());
 	this->lineEditStepSize->setEnabled(getValue("editor/stepSize").toBool());
 
+	initSliderDouble(this->horizontalSliderEyeSeparation, Settings::Settings::eyeSeparation);
+	initSliderDouble(this->horizontalSliderOutOfScreen, Settings::Settings::outOfScreen);
+	initSliderDouble(this->horizontalSliderNearClippingPlane, Settings::Settings::nearClippingPlane);
+
 	updateComboBox(this->comboBoxLineWrap, Settings::Settings::lineWrap);
 	updateComboBox(this->comboBoxLineWrapIndentationStyle, Settings::Settings::lineWrapIndentationStyle);
 	updateComboBox(this->comboBoxLineWrapVisualizationStart, Settings::Settings::lineWrapVisualizationBegin);
diff --git a/src/Preferences.h b/src/Preferences.h
index d1fe1cc37..85aad15ec 100644
--- a/src/Preferences.h
+++ b/src/Preferences.h
@@ -61,6 +61,9 @@ public slots:
 	void on_consoleFontSize_currentIndexChanged(const QString &);
 	void on_checkBoxEnableAutocomplete_toggled(bool);
 	void on_lineEditCharacterThreshold_textChanged(const QString &);
+	void on_horizontalSliderEyeSeparation_valueChanged(int);
+	void on_horizontalSliderOutOfScreen_valueChanged(int);
+	void on_horizontalSliderNearClippingPlane_valueChanged(int);
   //
 	// editor settings
   //
diff --git a/src/Preferences.ui b/src/Preferences.ui
index 15311b69d..20e7f08e5 100644
--- a/src/Preferences.ui
+++ b/src/Preferences.ui
@@ -6,7 +6,7 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>636</width>
+    <width>653</width>
     <height>539</height>
    </rect>
   </property>
@@ -27,7 +27,7 @@
     <item row="0" column="0">
      <widget class="QStackedWidget" name="stackedWidget">
       <property name="currentIndex">
-       <number>1</number>
+       <number>0</number>
       </property>
       <widget class="QWidget" name="page3DView">
        <layout class="QVBoxLayout" name="verticalLayout_4">
@@ -87,6 +87,58 @@
           </item>
          </layout>
         </item>
+        <item>
+         <layout class="QFormLayout" name="formLayout">
+          <item row="0" column="0">
+           <widget class="QLabel" name="label_14">
+            <property name="text">
+             <string>Eye Separation</string>
+            </property>
+           </widget>
+          </item>
+          <item row="0" column="1">
+           <widget class="QSlider" name="horizontalSliderEyeSeparation">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="0">
+           <widget class="QLabel" name="label_13">
+            <property name="text">
+             <string>Out of Screen</string>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="1">
+           <widget class="QSlider" name="horizontalSliderOutOfScreen">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="tickPosition">
+             <enum>QSlider::NoTicks</enum>
+            </property>
+            <property name="tickInterval">
+             <number>0</number>
+            </property>
+           </widget>
+          </item>
+          <item row="2" column="0">
+           <widget class="QLabel" name="label_12">
+            <property name="text">
+             <string>Near Clipping Plane</string>
+            </property>
+           </widget>
+          </item>
+          <item row="2" column="1">
+           <widget class="QSlider" name="horizontalSliderNearClippingPlane">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
         <item>
          <widget class="QCheckBox" name="checkBoxShowWarningsIn3dView">
           <property name="text">
@@ -135,9 +187,9 @@
            <property name="geometry">
             <rect>
              <x>0</x>
-             <y>-450</y>
-             <width>602</width>
-             <height>901</height>
+             <y>0</y>
+             <width>590</width>
+             <height>980</height>
             </rect>
            </property>
            <layout class="QGridLayout" name="gridLayout_5">
@@ -1292,8 +1344,8 @@
               <rect>
                <x>0</x>
                <y>0</y>
-               <width>84</width>
-               <height>26</height>
+               <width>100</width>
+               <height>30</height>
               </rect>
              </property>
              <layout class="QVBoxLayout" name="verticalLayout_10">
@@ -1615,8 +1667,8 @@
             <rect>
              <x>0</x>
              <y>0</y>
-             <width>548</width>
-             <height>747</height>
+             <width>640</width>
+             <height>978</height>
             </rect>
            </property>
            <layout class="QVBoxLayout" name="verticalLayout_12">
diff --git a/src/QGLView.cc b/src/QGLView.cc
index 0234ea662..416c4bb3d 100644
--- a/src/QGLView.cc
+++ b/src/QGLView.cc
@@ -373,6 +373,12 @@ void QGLView::setOrthoMode(bool enabled)
 	else this->cam.setProjection(Camera::ProjectionType::PERSPECTIVE);
 }
 
+void QGLView::setAnaglyphMode(bool enabled)
+{
+	if (enabled) this->cam.setProjection(Camera::ProjectionType::ANAGLYPH);
+	else this->cam.setProjection(Camera::ProjectionType::PERSPECTIVE);
+}
+
 void QGLView::translate(double x, double y, double z, bool relative, bool viewPortRelative)
 {
     Matrix3d aax, aay, aaz;
diff --git a/src/QGLView.h b/src/QGLView.h
index 195852972..1a45aec11 100644
--- a/src/QGLView.h
+++ b/src/QGLView.h
@@ -29,6 +29,7 @@ class QGLView :
 	Q_PROPERTY(bool showAxes READ showAxes WRITE setShowAxes);
 	Q_PROPERTY(bool showCrosshairs READ showCrosshairs WRITE setShowCrosshairs);
 	Q_PROPERTY(bool orthoMode READ orthoMode WRITE setOrthoMode);
+	Q_PROPERTY(bool anaglyphMode READ anaglyphMode WRITE setAnaglyphMode);
 	Q_PROPERTY(double showScaleProportional READ showScaleProportional WRITE setShowScaleProportional);
 
 public:
@@ -39,6 +40,8 @@ public:
 	// Properties
 	bool orthoMode() const { return (this->cam.projection == Camera::ProjectionType::ORTHOGONAL); }
 	void setOrthoMode(bool enabled);
+	bool anaglyphMode() const { return (this->cam.projection == Camera::ProjectionType::ANAGLYPH); }
+	void setAnaglyphMode(bool enabled);
 	bool showScaleProportional() const { return this->showscale; }
 	void setShowScaleProportional(bool enabled) { this->showscale = enabled; }
 	std::string getRendererInfo() const override;
diff --git a/src/colormap.cc b/src/colormap.cc
index 6b794be17..1dd4559e0 100644
--- a/src/colormap.cc
+++ b/src/colormap.cc
@@ -8,6 +8,7 @@
 namespace fs = boost::filesystem;
 
 static const char *DEFAULT_COLOR_SCHEME_NAME = "Cornfield";
+bool ColorMap::anaglyphmode = false;
 
 // See http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv
 static void rgbtohsv(float r, float g, float b, float &h, float &s, float &v)
@@ -37,6 +38,7 @@ RenderColorScheme::RenderColorScheme() : _path("")
   _show_in_gui = true;
 
   _color_scheme.insert(ColorScheme::value_type(RenderColor::BACKGROUND_COLOR, Color4f(0xff, 0xff, 0xe5)));
+  _color_scheme.insert(ColorScheme::value_type(RenderColor::HIGHLIGHT_COLOR, Color4f(0xff, 0x51, 0x51, 0x80))); // 50% transparencency
   _color_scheme.insert(ColorScheme::value_type(RenderColor::AXES_COLOR, Color4f(0x00, 0x00, 0x00)));
   _color_scheme.insert(ColorScheme::value_type(RenderColor::OPENCSG_FACE_FRONT_COLOR, Color4f(0xf9, 0xd7, 0x2c)));
   _color_scheme.insert(ColorScheme::value_type(RenderColor::OPENCSG_FACE_BACK_COLOR, Color4f(0x9d, 0xcb, 0x51)));
@@ -58,6 +60,7 @@ RenderColorScheme::RenderColorScheme(fs::path path) : _path(path)
 	_show_in_gui = pt.get<bool>("show-in-gui");
 	
 	addColor(RenderColor::BACKGROUND_COLOR, "background");
+	addColor(RenderColor::HIGHLIGHT_COLOR, "highlight");
 	addColor(RenderColor::AXES_COLOR, "axes-color");
 	addColor(RenderColor::OPENCSG_FACE_FRONT_COLOR, "opencsg-face-front");
 	addColor(RenderColor::OPENCSG_FACE_BACK_COLOR, "opencsg-face-back");
@@ -132,6 +135,14 @@ void RenderColorScheme::addColor(RenderColor colorKey, std::string key)
     int g = (val >> 8) & 0xff;
     int b = val & 0xff;
     _color_scheme.insert(ColorScheme::value_type(colorKey, Color4f(r, g, b)));
+  } else if ((color.length() == 9) && (color.at(0) == '#')) {
+    char *endptr;
+    unsigned long int val = strtoul(color.substr(1).c_str(), &endptr, 16);
+    int r = (val >> 24) & 0xff;
+    int g = (val >> 16) & 0xff;
+    int b = (val >> 8) & 0xff;
+    int a = val & 0xff;
+    _color_scheme.insert(ColorScheme::value_type(colorKey, Color4f(r, g, b, a)));
   }
   else {
     throw std::invalid_argument(std::string("invalid color value for key '") + key + "': '" + color + "'");
@@ -217,9 +228,10 @@ std::list<std::string> ColorMap::colorSchemeNames(bool guiOnly) const
 
 Color4f ColorMap::getColor(const ColorScheme &cs, const RenderColor rc)
 {
-  if (cs.count(rc)) return cs.at(rc);
-  if (ColorMap::inst()->defaultColorScheme().count(rc)) return ColorMap::inst()->defaultColorScheme().at(rc);
-  return Color4f(0, 0, 0, 127);
+  Color4f c(0, 0, 0, 127);
+  if (cs.count(rc)) c =  cs.at(rc);
+  else if (ColorMap::inst()->defaultColorScheme().count(rc)) c = ColorMap::inst()->defaultColorScheme().at(rc);
+  return ColorMap::anaglyphColor(c);
 }
 
 Color4f ColorMap::getColorHSV(const Color4f &col)
@@ -306,3 +318,27 @@ ColorMap::colorscheme_set_t ColorMap::enumerateColorSchemes()
 
   return result_set;
 }
+
+/* Given rgb color, calculate closest color suitable for anaglyph.
+   This is the Dubois algorithm, with left and right pixel the same color.
+   https://www.site.uottawa.ca/~edubois/icassp01/anaglyphdubois.pdf
+ */
+
+Color4f ColorMap::anaglyphColor(const Color4f &c_in) {
+  Color4f c_out;
+  if (anaglyphmode) {
+    // Numbers are for lcd and red/cyan glasses, from "Producing Anaglyphs from Synthetic Images",
+    // https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.6968&rep=rep1&type=pdf#page=4
+    c_out[0] = (0.4561   -.0434706)*c_in[0]+ ( .500484 -.0879388)*c_in[1]+( .176381 -0.00155529)*c_in[2];
+    c_out[1] = (-.0400822+.378476) *c_in[0]+ (-.0378246+.73364)  *c_in[1]+(-.0157589 -.0184503) *c_in[2];
+    c_out[2] = (-.0152161-.0721527)*c_in[0]+ (-.0205971-.112961) *c_in[1]+(-.00546856+1.2264)   *c_in[2];
+    c_out[3] = c_in[3];
+    for (int i = 0; i < 3; i++) {
+      if (c_out[i] < 0.0) c_out[i] = 0.0;
+      else if (c_out[i] > 1.0) c_out[i] = 1.0;
+    }
+  } else {
+    c_out = c_in;
+  }
+  return c_out;
+}
diff --git a/src/colormap.h b/src/colormap.h
index a0dd9c350..06a859012 100644
--- a/src/colormap.h
+++ b/src/colormap.h
@@ -13,6 +13,7 @@ namespace fs = boost::filesystem;
 
 enum class RenderColor {
 	BACKGROUND_COLOR,
+	HIGHLIGHT_COLOR,
 	AXES_COLOR,
 	OPENCSG_FACE_FRONT_COLOR,
 	OPENCSG_FACE_BACK_COLOR,
@@ -81,6 +82,8 @@ public:
 	static Color4f getColor(const ColorScheme &cs, const RenderColor rc);
         static Color4f getContrastColor(const Color4f &col);
 	static Color4f getColorHSV(const Color4f &col);
+  static Color4f anaglyphColor(const Color4f &col);
+  static void setAnaglyphMode(bool enabled) { anaglyphmode = enabled; };
 	
 private:
 	ColorMap();
@@ -89,4 +92,5 @@ private:
         colorscheme_set_t enumerateColorSchemes();
         void enumerateColorSchemesInPath(colorscheme_set_t &result_set, const fs::path path);
         colorscheme_set_t colorSchemeSet;
+        static bool anaglyphmode;
 };
diff --git a/src/initConfig.cc b/src/initConfig.cc
index 712839f8b..ddad1712d 100644
--- a/src/initConfig.cc
+++ b/src/initConfig.cc
@@ -21,6 +21,19 @@ void InitConfigurator::initComboBox(QComboBox *comboBox, const Settings::Setting
 	}
 }
 
+void InitConfigurator::initSliderRange(const BlockSignals<QSlider *> &spinBox,const Settings::SettingsEntry &entry)
+{
+	const RangeType &range = entry.range().toRange();
+	spinBox->setMinimum(range.begin_value());
+	spinBox->setMaximum(range.end_value());
+}
+
+void InitConfigurator::initSliderDouble(const BlockSignals<QSlider *> &spinBox,const Settings::SettingsEntry &entry)
+{
+	const Settings::Settings *s = Settings::Settings::inst();
+	spinBox->setValue(s->get(entry).toDouble());
+}
+
 void InitConfigurator::initSpinBoxRange(const BlockSignals<QSpinBox *> &spinBox,const Settings::SettingsEntry &entry)
 {
 	const RangeType &range = entry.range().toRange();
diff --git a/src/initConfig.h b/src/initConfig.h
index c6543eb4d..d228f6788 100644
--- a/src/initConfig.h
+++ b/src/initConfig.h
@@ -35,9 +35,13 @@ protected:
 	void initSpinBoxRange(const BlockSignals<QSpinBox *> &spinBox,const Settings::SettingsEntry &entry);
 	/** Initialize spinbox double value from the settings value */
 	void initSpinBoxDouble(const BlockSignals<QSpinBox *> &spinBox, const Settings::SettingsEntry &entry);
+	/** Initialize slider min/max values from the settings range values */
+	void initSliderRange(const BlockSignals<QSlider *> &spinBox,const Settings::SettingsEntry &entry);
+	/** Initialize slider double value from the settings value */
+	void initSliderDouble(const BlockSignals<QSlider *> &spinBox, const Settings::SettingsEntry &entry);
 	/** Update combobox from current settings */
 	void updateComboBox(const BlockSignals<QComboBox *> &comboBox,const Settings::SettingsEntry &entry);
 	/** used in AxisConfigWidget class **/
 	void initDoubleSpinBox(QDoubleSpinBox *spinBox,const Settings::SettingsEntry &entry);
 
-};
\ No newline at end of file
+};
diff --git a/src/mainwin.cc b/src/mainwin.cc
index 39bb52597..42cb15d75 100755
--- a/src/mainwin.cc
+++ b/src/mainwin.cc
@@ -445,6 +445,7 @@ MainWindow::MainWindow(const QStringList &filenames)
 	connect(this->viewActionViewAll, SIGNAL(triggered()), this, SLOT(viewAll()));
 	connect(this->viewActionPerspective, SIGNAL(triggered()), this, SLOT(viewPerspective()));
 	connect(this->viewActionOrthogonal, SIGNAL(triggered()), this, SLOT(viewOrthogonal()));
+	connect(this->viewActionAnaglyph, SIGNAL(triggered()), this, SLOT(viewAnaglyph()));
 	connect(this->viewActionZoomIn, SIGNAL(triggered()), qglview, SLOT(ZoomIn()));
 	connect(this->viewActionZoomOut, SIGNAL(triggered()), qglview, SLOT(ZoomOut()));
 	connect(this->viewActionHideEditorToolBar, SIGNAL(triggered()), this, SLOT(hideEditorToolbar()));
@@ -530,6 +531,7 @@ MainWindow::MainWindow(const QStringList &filenames)
 	initActionIcon(viewActionShowCrosshairs, ":/images/cross.png", ":/images/crosswhite.png");
 	initActionIcon(viewActionPerspective, ":/images/perspective1.png", ":/images/perspective1white.png");
 	initActionIcon(viewActionOrthogonal, ":/images/orthogonal.png", ":/images/orthogonalwhite.png");
+	initActionIcon(viewActionAnaglyph, ":/images/Anaglyph.png", ":/images/Anaglyph-white.png");
 	initActionIcon(designActionPreview, ":/images/preview-32.png", ":/images/preview-32-white.png");
 	initActionIcon(viewActionAnimate, ":/images/animate.png", ":/images/animate.png");
 	initActionIcon(fileActionExportSTL, ":/images/STL.png", ":/images/STL-white.png");
@@ -755,7 +757,9 @@ void MainWindow::loadViewSettings(){
         viewActionShowScaleProportional->setChecked(true);
         viewModeShowScaleProportional();
     }
-	if (settings.value("view/orthogonalProjection").toBool()) {
+	if (settings.value("view/anaglyphProjection").toBool()) {
+		viewAnaglyph();
+	} else if (settings.value("view/orthogonalProjection").toBool()) {
 		viewOrthogonal();
 	} else {
 		viewPerspective();
@@ -2772,9 +2776,12 @@ void MainWindow::viewCenter()
 void MainWindow::viewPerspective()
 {
 	QSettingsCached settings;
+	ColorMap::setAnaglyphMode(false);
 	settings.setValue("view/orthogonalProjection",false);
+	settings.setValue("view/anaglyphProjection",false);
 	viewActionPerspective->setChecked(true);
 	viewActionOrthogonal->setChecked(false);
+	viewActionAnaglyph->setChecked(false);
 	this->qglview->setOrthoMode(false);
 	this->qglview->updateGL();
 }
@@ -2782,13 +2789,29 @@ void MainWindow::viewPerspective()
 void MainWindow::viewOrthogonal()
 {
 	QSettingsCached settings;
+	ColorMap::setAnaglyphMode(false);
 	settings.setValue("view/orthogonalProjection",true);
+	settings.setValue("view/anaglyphProjection",false);
 	viewActionPerspective->setChecked(false);
 	viewActionOrthogonal->setChecked(true);
+	viewActionAnaglyph->setChecked(false);
 	this->qglview->setOrthoMode(true);
 	this->qglview->updateGL();
 }
 
+void MainWindow::viewAnaglyph()
+{
+	QSettingsCached settings;
+	ColorMap::setAnaglyphMode(true);
+	settings.setValue("view/orthogonalProjection",false);
+	settings.setValue("view/anaglyphProjection",true);
+	viewActionPerspective->setChecked(false);
+	viewActionOrthogonal->setChecked(false);
+	viewActionAnaglyph->setChecked(true);
+	this->qglview->setAnaglyphMode(true);
+	this->qglview->updateGL();
+}
+
 void MainWindow::viewTogglePerspective()
 {
 	QSettingsCached settings;
diff --git a/src/renderer.cc b/src/renderer.cc
index 7964e1961..a61941882 100644
--- a/src/renderer.cc
+++ b/src/renderer.cc
@@ -186,12 +186,13 @@ void Renderer::setColor(const float color[4], const shaderinfo_t *shaderinfo) co
 	PRINTD("setColor a");
 	Color4f col;
 	getColor(ColorMode::MATERIAL,col);
-	float c[4] = {color[0], color[1], color[2], color[3]};
+	Color4f c(color[0], color[1], color[2], color[3]);
+	c = ColorMap::anaglyphColor(c);
 	if (c[0] < 0) c[0] = col[0];
 	if (c[1] < 0) c[1] = col[1];
 	if (c[2] < 0) c[2] = col[2];
 	if (c[3] < 0) c[3] = col[3];
-	glColor4fv(c);
+	glColor4f(c[0], c[1], c[2], c[3]);
 #ifdef ENABLE_OPENCSG
 	if (shaderinfo) {
 		glUniform4f(shaderinfo->data.csg_rendering.color_area, c[0], c[1], c[2], c[3]);
@@ -241,6 +242,7 @@ void Renderer::setColorScheme(const ColorScheme &cs) {
 	colormap[ColorMode::MATERIAL_EDGES] = ColorMap::getColor(cs, RenderColor::CGAL_EDGE_FRONT_COLOR);
 	colormap[ColorMode::CUTOUT_EDGES] = ColorMap::getColor(cs, RenderColor::CGAL_EDGE_BACK_COLOR);
 	colormap[ColorMode::EMPTY_SPACE] = ColorMap::getColor(cs, RenderColor::BACKGROUND_COLOR);
+	colormap[ColorMode::HIGHLIGHT] = ColorMap::getColor(cs, RenderColor::HIGHLIGHT_COLOR);
 	this->colorscheme = &cs;
 }
 
diff --git a/src/settings.cc b/src/settings.cc
index 8888412e6..00e9dc636 100644
--- a/src/settings.cc
+++ b/src/settings.cc
@@ -166,6 +166,9 @@ SettingsVisitor::~SettingsVisitor()
  */
 SettingsEntry Settings::showWarningsIn3dView("3dview", "showWarningsIn3dView", Value(true), Value(true));
 SettingsEntry Settings::mouseCentricZoom("3dview", "mouseCentricZoom", Value(true), Value(true));
+SettingsEntry Settings::eyeSeparation("3dview", "eyeSeparation", Value(RangeType(0, 800)), Value(120)); // in 0.1 mm
+SettingsEntry Settings::outOfScreen("3dview", "outOfScreen", Value(RangeType(0, 1000)), Value(0)); // in 0.1 %
+SettingsEntry Settings::nearClippingPlane("3dview", "nearClippingPlane", Value(RangeType(1, 2000)), Value(10)); // in 0.1 %
 SettingsEntry Settings::indentationWidth("editor", "indentationWidth", Value(RangeType(1, 16)), Value(4));
 SettingsEntry Settings::tabWidth("editor", "tabWidth", Value(RangeType(1, 16)), Value(4));
 SettingsEntry Settings::lineWrap("editor", "lineWrap", values("None", _("None"), "Char", _("Wrap at character boundaries"), "Word", _("Wrap at word boundaries")), Value("Word"));
diff --git a/src/settings.h b/src/settings.h
index eb442b0be..1b19bff6c 100644
--- a/src/settings.h
+++ b/src/settings.h
@@ -37,6 +37,9 @@ class Settings
 public:
     static SettingsEntry showWarningsIn3dView;
     static SettingsEntry mouseCentricZoom;
+    static SettingsEntry eyeSeparation;
+    static SettingsEntry outOfScreen;
+    static SettingsEntry nearClippingPlane;
     static SettingsEntry indentationWidth;
     static SettingsEntry tabWidth;
     static SettingsEntry lineWrap;
